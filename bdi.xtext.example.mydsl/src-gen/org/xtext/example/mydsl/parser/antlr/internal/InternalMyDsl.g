/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BDI";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBDI
entryRuleBDI returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBDIRule()); }
	 iv_ruleBDI=ruleBDI 
	 { $current=$iv_ruleBDI.current; } 
	 EOF 
;

// Rule BDI
ruleBDI returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BDIModel {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBDIAccess().getBDIModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBDIAccess().getAgentsAgentParserRuleCall_1_0()); 
	    }
		lv_Agents_1_0=ruleAgent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBDIRule());
	        }
       		add(
       			$current, 
       			"Agents",
        		lv_Agents_1_0, 
        		"Agent");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBDIAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAgentRule()); }
	 iv_ruleAgent=ruleAgent 
	 { $current=$iv_ruleAgent.current; } 
	 EOF 
;

// Rule Agent
ruleAgent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Agent' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAgentAccess().getAgentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAgentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAgentAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getImportImportsParserRuleCall_3_0()); 
	    }
		lv_Import_3_0=ruleImports		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"Import",
        		lv_Import_3_0, 
        		"Imports");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getEventEventsParserRuleCall_4_0()); 
	    }
		lv_Event_4_0=ruleEvents		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"Event",
        		lv_Event_4_0, 
        		"Events");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getParametersParametersParserRuleCall_5_0()); 
	    }
		lv_Parameters_5_0=ruleParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"Parameters",
        		lv_Parameters_5_0, 
        		"Parameters");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getBeliefBeliefSetParserRuleCall_6_0()); 
	    }
		lv_Belief_6_0=ruleBeliefSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"Belief",
        		lv_Belief_6_0, 
        		"BeliefSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getPlanPlansParserRuleCall_7_0()); 
	    }
		lv_Plan_7_0=rulePlans		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"Plan",
        		lv_Plan_7_0, 
        		"Plans");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAgentAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	 iv_ruleImports=ruleImports 
	 { $current=$iv_ruleImports.current; } 
	 EOF 
;

// Rule Imports
ruleImports returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Imports {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportsAccess().getImportsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportsAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_Imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportsRule());
	        }
       		add(
       			$current, 
       			"Imports",
        		lv_Imports_1_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportsAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); } 
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current.getText(); }  
	 EOF 
;

// Rule Import
ruleImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Import {' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportAccess().getImportKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getImportAccess().getFilenameParserRuleCall_1()); 
    }
    this_Filename_1=ruleFilename    {
		$current.merge(this_Filename_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleFilename
entryRuleFilename returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFilenameRule()); } 
	 iv_ruleFilename=ruleFilename 
	 { $current=$iv_ruleFilename.current.getText(); }  
	 EOF 
;

// Rule Filename
ruleFilename returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getFilenameAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleEvents
entryRuleEvents returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventsRule()); }
	 iv_ruleEvents=ruleEvents 
	 { $current=$iv_ruleEvents.current; } 
	 EOF 
;

// Rule Events
ruleEvents returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Events {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventsAccess().getEventsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventsAccess().getEventsEventParserRuleCall_1_0()); 
	    }
		lv_Events_1_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventsRule());
	        }
       		add(
       			$current, 
       			"Events",
        		lv_Events_1_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventsAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Event' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		lv_EventType_3_0=RULE_STRING
		{
			newLeafNode(lv_EventType_3_0, grammarAccess.getEventAccess().getEventTypeSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"EventType",
        		lv_EventType_3_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getParameterParameterParserRuleCall_4_0()); 
	    }
		lv_Parameter_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		add(
       			$current, 
       			"Parameter",
        		lv_Parameter_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEventAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	 iv_ruleParameters=ruleParameters 
	 { $current=$iv_ruleParameters.current; } 
	 EOF 
;

// Rule Parameters
ruleParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Parameters {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParametersAccess().getParametersKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getParametersParameterParserRuleCall_1_0()); 
	    }
		lv_Parameters_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		add(
       			$current, 
       			"Parameters",
        		lv_Parameters_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParametersAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Parameter {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getParameterKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getEqualsSignKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getParameterAccess().getValueParserRuleCall_3()); 
    }
ruleValue
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Value {' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getValueKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getValueAccess().getCodeParserRuleCall_1()); 
    }
    this_Code_1=ruleCode    {
		$current.merge(this_Code_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleCode
entryRuleCode returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeRule()); } 
	 iv_ruleCode=ruleCode 
	 { $current=$iv_ruleCode.current.getText(); }  
	 EOF 
;

// Rule Code
ruleCode returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getCodeAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getCodeAccess().getIDTerminalRuleCall_1()); 
    }

    |    this_BOOLEAN_2=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_2);
    }

    { 
    newLeafNode(this_BOOLEAN_2, grammarAccess.getCodeAccess().getBOOLEANTerminalRuleCall_2()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getCodeAccess().getNumberParserRuleCall_3()); 
    }
    this_Number_3=ruleNumber    {
		$current.merge(this_Number_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_NETWORK_4=RULE_NETWORK    {
		$current.merge(this_NETWORK_4);
    }

    { 
    newLeafNode(this_NETWORK_4, grammarAccess.getCodeAccess().getNETWORKTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_equalTo_0_0=	'==' 
    {
        newLeafNode(lv_equalTo_0_0, grammarAccess.getOperatorAccess().getEqualToEqualsSignEqualsSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "equalTo", true, "==");
	    }

)
)
    |(
(
		lv_largerThan_1_0=	'>' 
    {
        newLeafNode(lv_largerThan_1_0, grammarAccess.getOperatorAccess().getLargerThanGreaterThanSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "largerThan", true, ">");
	    }

)
)
    |(
(
		lv_smallerThan_2_0=	'<' 
    {
        newLeafNode(lv_smallerThan_2_0, grammarAccess.getOperatorAccess().getSmallerThanLessThanSignKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "smallerThan", true, "<");
	    }

)
)
    |(
(
		lv_largerOrEqualTo_3_0=	'>=' 
    {
        newLeafNode(lv_largerOrEqualTo_3_0, grammarAccess.getOperatorAccess().getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "largerOrEqualTo", true, ">=");
	    }

)
)
    |(
(
		lv_smallerOrEqualTo_4_0=	'<=' 
    {
        newLeafNode(lv_smallerOrEqualTo_4_0, grammarAccess.getOperatorAccess().getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "smallerOrEqualTo", true, "<=");
	    }

)
)
    |(
(
		lv_notEqualTo_5_0=	'!=' 
    {
        newLeafNode(lv_notEqualTo_5_0, grammarAccess.getOperatorAccess().getNotEqualToExclamationMarkEqualsSignKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "notEqualTo", true, "!=");
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getSubjectiveQualifiedNameParserRuleCall_0_0_0()); 
	    }
		lv_subjective_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"subjective",
        		lv_subjective_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getObjectiveExpressionParserRuleCall_0_2_0()); 
	    }
		lv_objective_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"objective",
        		lv_objective_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))(((
(
		lv_and_3_0=	'and' 
    {
        newLeafNode(lv_and_3_0, grammarAccess.getConditionAccess().getAndAndKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionRule());
	        }
       		setWithLastConsumed($current, "and", true, "and");
	    }

)
)
    |(
(
		lv_or_4_0=	'or' 
    {
        newLeafNode(lv_or_4_0, grammarAccess.getConditionAccess().getOrOrKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionRule());
	        }
       		setWithLastConsumed($current, "or", true, "or");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getCompareConditionConditionParserRuleCall_1_1_0()); 
	    }
		lv_compareCondition_5_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"compareCondition",
        		lv_compareCondition_5_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTermParserRuleCall_0()); 
    }
    this_Term_0=ruleTerm
    { 
        $current = $this_Term_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); 
    }
    this_Factor_0=ruleFactor
    { 
        $current = $this_Factor_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTermAccess().getMultiplyLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTermAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTermAccess().getDivisionLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTermAccess().getSolidusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current; } 
	 EOF 
;

// Rule Factor
ruleFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getNumberNumberParserRuleCall_0_0()); 
	    }
		lv_number_0_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getVariableQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_string_2_0=RULE_STRING
		{
			newLeafNode(lv_string_2_0, grammarAccess.getFactorAccess().getStringSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_2_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_boolean_3_0=RULE_BOOLEAN
		{
			newLeafNode(lv_boolean_3_0, grammarAccess.getFactorAccess().getBooleanBOOLEANTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"boolean",
        		lv_boolean_3_0, 
        		"BOOLEAN");
	    }

)
)
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_4_1_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFactorAccess().getRightParenthesisKeyword_4_2());
    }
))
;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_2_1()); 
    }
)*)
    ;





// Entry rule entryRulePlans
entryRulePlans returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlansRule()); }
	 iv_rulePlans=rulePlans 
	 { $current=$iv_rulePlans.current; } 
	 EOF 
;

// Rule Plans
rulePlans returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Plans {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPlansAccess().getPlansKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlansAccess().getPlansPlanParserRuleCall_1_0()); 
	    }
		lv_Plans_1_0=rulePlan		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlansRule());
	        }
       		add(
       			$current, 
       			"Plans",
        		lv_Plans_1_0, 
        		"Plan");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPlansAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRulePlan
entryRulePlan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlanRule()); }
	 iv_rulePlan=rulePlan 
	 { $current=$iv_rulePlan.current; } 
	 EOF 
;

// Rule Plan
rulePlan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Plan {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPlanAccess().getPlanKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPlanAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getBodyBodyParserRuleCall_2_0()); 
	    }
		lv_Body_2_0=ruleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"Body",
        		lv_Body_2_0, 
        		"Body");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getTriggerTriggerParserRuleCall_3_0()); 
	    }
		lv_Trigger_3_0=ruleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"Trigger",
        		lv_Trigger_3_0, 
        		"Trigger");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlanAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBody
entryRuleBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); } 
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current.getText(); }  
	 EOF 
;

// Rule Body
ruleBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Body {' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBodyAccess().getBodyKeyword_0()); 
    }
    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getBodyAccess().getSTRINGTerminalRuleCall_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Trigger {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTriggerAccess().getTriggerKeyword_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTriggerAccess().getEventEventCrossReference_0_1_0()); 
	}

)
))
    |((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTriggerAccess().getGoalGoalCrossReference_1_0_0()); 
	}

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTriggerAccess().getRightCurlyBracketKeyword_1_1());
    }
))
;





// Entry rule entryRuleBeliefSet
entryRuleBeliefSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBeliefSetRule()); }
	 iv_ruleBeliefSet=ruleBeliefSet 
	 { $current=$iv_ruleBeliefSet.current; } 
	 EOF 
;

// Rule BeliefSet
ruleBeliefSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BeliefSet {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBeliefSetAccess().getBeliefSetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBeliefSetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBeliefSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBeliefSetAccess().getBeliefSetBeliefParserRuleCall_2_0()); 
	    }
		lv_BeliefSet_2_0=ruleBelief		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBeliefSetRule());
	        }
       		add(
       			$current, 
       			"BeliefSet",
        		lv_BeliefSet_2_0, 
        		"Belief");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBeliefSetAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBelief
entryRuleBelief returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBeliefRule()); }
	 iv_ruleBelief=ruleBelief 
	 { $current=$iv_ruleBelief.current; } 
	 EOF 
;

// Rule Belief
ruleBelief returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Belief {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBeliefAccess().getBeliefKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBeliefAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBeliefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBeliefAccess().getFactFactParserRuleCall_2_0()); 
	    }
		lv_Fact_2_0=ruleFact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBeliefRule());
	        }
       		add(
       			$current, 
       			"Fact",
        		lv_Fact_2_0, 
        		"Fact");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBeliefAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFact
entryRuleFact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactRule()); }
	 iv_ruleFact=ruleFact 
	 { $current=$iv_ruleFact.current; } 
	 EOF 
;

// Rule Fact
ruleFact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Fact {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFactAccess().getFactKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactAccess().getStatementsStatementsParserRuleCall_1_0()); 
	    }
		lv_Statements_1_0=ruleStatements		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactRule());
	        }
       		set(
       			$current, 
       			"Statements",
        		lv_Statements_1_0, 
        		"Statements");
	        afterParserOrEnumRuleCall();
	    }

)
)this_STRING_2=RULE_STRING
    { 
    newLeafNode(this_STRING_2, grammarAccess.getFactAccess().getSTRINGTerminalRuleCall_2()); 
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFactAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	 iv_ruleStatements=ruleStatements 
	 { $current=$iv_ruleStatements.current; } 
	 EOF 
;

// Rule Statements
ruleStatements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_Statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementsRule());
	        }
       		add(
       			$current, 
       			"Statements",
        		lv_Statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current.getText(); }  
	 EOF 
;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCodeParserRuleCall()); 
    }
    this_Code_0=ruleCode    {
		$current.merge(this_Code_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;







// Entry rule entryRuleGoal
entryRuleGoal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoalRule()); }
	 iv_ruleGoal=ruleGoal 
	 { $current=$iv_ruleGoal.current; } 
	 EOF 
;

// Rule Goal
ruleGoal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGoalAccess().getAchieveParserRuleCall_0()); 
    }
    this_Achieve_0=ruleAchieve
    { 
        $current = $this_Achieve_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGoalAccess().getQueryParserRuleCall_1()); 
    }
    this_Query_1=ruleQuery
    { 
        $current = $this_Query_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGoalAccess().getMaintainParserRuleCall_2()); 
    }
    this_Maintain_2=ruleMaintain
    { 
        $current = $this_Maintain_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGoalAccess().getPerformParserRuleCall_3()); 
    }
    this_Perform_3=rulePerform
    { 
        $current = $this_Perform_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAchieve
entryRuleAchieve returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAchieveRule()); }
	 iv_ruleAchieve=ruleAchieve 
	 { $current=$iv_ruleAchieve.current; } 
	 EOF 
;

// Rule Achieve
ruleAchieve returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Achieve {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAchieveAccess().getAchieveKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAchieveAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAchieveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAchieveAccess().getConditionConditionParserRuleCall_2_0()); 
	    }
		lv_Condition_2_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAchieveRule());
	        }
       		set(
       			$current, 
       			"Condition",
        		lv_Condition_2_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAchieveAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current; } 
	 EOF 
;

// Rule Query
ruleQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Query {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryAccess().getQueryKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQueryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getConditionConditionParserRuleCall_2_0()); 
	    }
		lv_Condition_2_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		set(
       			$current, 
       			"Condition",
        		lv_Condition_2_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getResultResultParserRuleCall_3_0()); 
	    }
		lv_Result_3_0=ruleResult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		set(
       			$current, 
       			"Result",
        		lv_Result_3_0, 
        		"Result");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMaintain
entryRuleMaintain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaintainRule()); }
	 iv_ruleMaintain=ruleMaintain 
	 { $current=$iv_ruleMaintain.current; } 
	 EOF 
;

// Rule Maintain
ruleMaintain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Maintain {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaintainAccess().getMaintainKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMaintainAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMaintainRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMaintainAccess().getConditionConditionParserRuleCall_2_0()); 
	    }
		lv_Condition_2_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaintainRule());
	        }
       		set(
       			$current, 
       			"Condition",
        		lv_Condition_2_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMaintainAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulePerform
entryRulePerform returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPerformRule()); }
	 iv_rulePerform=rulePerform 
	 { $current=$iv_rulePerform.current; } 
	 EOF 
;

// Rule Perform
rulePerform returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Perform {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPerformAccess().getPerformKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPerformAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPerformRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPerformAccess().getConditionConditionParserRuleCall_2_0()); 
	    }
		lv_Condition_2_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPerformRule());
	        }
       		set(
       			$current, 
       			"Condition",
        		lv_Condition_2_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPerformAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleResult
entryRuleResult returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultRule()); } 
	 iv_ruleResult=ruleResult 
	 { $current=$iv_ruleResult.current.getText(); }  
	 EOF 
;

// Rule Result
ruleResult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getResultAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





RULE_NETWORK : RULE_OCTET '.' RULE_OCTET '.' RULE_OCTET '.' RULE_OCTET;

RULE_OCTET : ('0'..'9'|'1'..'9' '0'..'9'|'1' '0'..'9' '0'..'9'|'2' '0'..'5' '0'..'5');

RULE_BOOLEAN : ('false'|'true');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


