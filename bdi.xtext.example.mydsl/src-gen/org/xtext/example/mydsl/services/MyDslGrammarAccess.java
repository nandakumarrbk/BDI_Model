/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BDIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BDI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBDIModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAgentsAgentParserRuleCall_1_0 = (RuleCall)cAgentsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BDI:
		//	"BDIModel {" Agents+=Agent+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"BDIModel {" Agents+=Agent+ "}"
		public Group getGroup() { return cGroup; }

		//"BDIModel {"
		public Keyword getBDIModelKeyword_0() { return cBDIModelKeyword_0; }

		//Agents+=Agent+
		public Assignment getAgentsAssignment_1() { return cAgentsAssignment_1; }

		//Agent
		public RuleCall getAgentsAgentParserRuleCall_1_0() { return cAgentsAgentParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportImportsParserRuleCall_3_0 = (RuleCall)cImportAssignment_3.eContents().get(0);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventEventsParserRuleCall_4_0 = (RuleCall)cEventAssignment_4.eContents().get(0);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersParametersParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Assignment cBeliefAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBeliefBeliefSetParserRuleCall_6_0 = (RuleCall)cBeliefAssignment_6.eContents().get(0);
		private final Assignment cPlanAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPlanPlansParserRuleCall_7_0 = (RuleCall)cPlanAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Agent:
		//	"Agent" name=ID "{" Import+=Imports* Event+=Events* Parameters+=Parameters* Belief+=BeliefSet* Plan+=Plans* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Agent" name=ID "{" Import+=Imports* Event+=Events* Parameters+=Parameters* Belief+=BeliefSet* Plan+=Plans* "}"
		public Group getGroup() { return cGroup; }

		//"Agent"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//Import+=Imports*
		public Assignment getImportAssignment_3() { return cImportAssignment_3; }

		//Imports
		public RuleCall getImportImportsParserRuleCall_3_0() { return cImportImportsParserRuleCall_3_0; }

		//Event+=Events*
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }

		//Events
		public RuleCall getEventEventsParserRuleCall_4_0() { return cEventEventsParserRuleCall_4_0; }

		//Parameters+=Parameters*
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_5_0() { return cParametersParametersParserRuleCall_5_0; }

		//Belief+=BeliefSet*
		public Assignment getBeliefAssignment_6() { return cBeliefAssignment_6; }

		//BeliefSet
		public RuleCall getBeliefBeliefSetParserRuleCall_6_0() { return cBeliefBeliefSetParserRuleCall_6_0; }

		//Plan+=Plans*
		public Assignment getPlanAssignment_7() { return cPlanAssignment_7; }

		//Plans
		public RuleCall getPlanPlansParserRuleCall_7_0() { return cPlanPlansParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Imports:
		//	"Imports {" Imports+=Import+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"Imports {" Imports+=Import+ "}"
		public Group getGroup() { return cGroup; }

		//"Imports {"
		public Keyword getImportsKeyword_0() { return cImportsKeyword_0; }

		//Imports+=Import+
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFilenameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"Import {" Filename "}";
		@Override public ParserRule getRule() { return rule; }

		//"Import {" Filename "}"
		public Group getGroup() { return cGroup; }

		//"Import {"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//Filename
		public RuleCall getFilenameParserRuleCall_1() { return cFilenameParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class FilenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Filename");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Filename:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class EventsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Events");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Events:
		//	"Events {" Events+=Event+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"Events {" Events+=Event+ "}"
		public Group getGroup() { return cGroup; }

		//"Events {"
		public Keyword getEventsKeyword_0() { return cEventsKeyword_0; }

		//Events+=Event+
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }

		//Event
		public RuleCall getEventsEventParserRuleCall_1_0() { return cEventsEventParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventTypeSTRINGTerminalRuleCall_3_0 = (RuleCall)cEventTypeAssignment_3.eContents().get(0);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterParameterParserRuleCall_4_0 = (RuleCall)cParameterAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Event:
		//	"Event" name=ID "{" EventType=STRING Parameter+=Parameter* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Event" name=ID "{" EventType=STRING Parameter+=Parameter* "}"
		public Group getGroup() { return cGroup; }

		//"Event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//EventType=STRING
		public Assignment getEventTypeAssignment_3() { return cEventTypeAssignment_3; }

		//STRING
		public RuleCall getEventTypeSTRINGTerminalRuleCall_3_0() { return cEventTypeSTRINGTerminalRuleCall_3_0; }

		//Parameter+=Parameter*
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_0() { return cParameterParameterParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"Parameters {" Parameters+=Parameter+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"Parameters {" Parameters+=Parameter+ "}"
		public Group getGroup() { return cGroup; }

		//"Parameters {"
		public Keyword getParametersKeyword_0() { return cParametersKeyword_0; }

		//Parameters+=Parameter+
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0() { return cParametersParameterParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cValueParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Parameter:
		//	"Parameter {" name=ID "=" Value "}";
		@Override public ParserRule getRule() { return rule; }

		//"Parameter {" name=ID "=" Value "}"
		public Group getGroup() { return cGroup; }

		//"Parameter {"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//Value
		public RuleCall getValueParserRuleCall_3() { return cValueParserRuleCall_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Value:
		//	"Value {" Code "}";
		@Override public ParserRule getRule() { return rule; }

		//"Value {" Code "}"
		public Group getGroup() { return cGroup; }

		//"Value {"
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }

		//Code
		public RuleCall getCodeParserRuleCall_1() { return cCodeParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Code");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNETWORKTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Code:
		//	STRING | ID | BOOLEAN | Number | NETWORK;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID | BOOLEAN | Number | NETWORK
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_2() { return cBOOLEANTerminalRuleCall_2; }

		//Number
		public RuleCall getNumberParserRuleCall_3() { return cNumberParserRuleCall_3; }

		//NETWORK
		public RuleCall getNETWORKTerminalRuleCall_4() { return cNETWORKTerminalRuleCall_4; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEqualToAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEqualToEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualToAssignment_0.eContents().get(0);
		private final Assignment cLargerThanAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLargerThanGreaterThanSignKeyword_1_0 = (Keyword)cLargerThanAssignment_1.eContents().get(0);
		private final Assignment cSmallerThanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSmallerThanLessThanSignKeyword_2_0 = (Keyword)cSmallerThanAssignment_2.eContents().get(0);
		private final Assignment cLargerOrEqualToAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cLargerOrEqualToAssignment_3.eContents().get(0);
		private final Assignment cSmallerOrEqualToAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0 = (Keyword)cSmallerOrEqualToAssignment_4.eContents().get(0);
		private final Assignment cNotEqualToAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualToExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualToAssignment_5.eContents().get(0);
		
		//Operator:
		//	equalTo?="==" | largerThan?=">" | smallerThan?="<" | largerOrEqualTo?=">=" | smallerOrEqualTo?="<=" |
		//	notEqualTo?="!=";
		@Override public ParserRule getRule() { return rule; }

		//equalTo?="==" | largerThan?=">" | smallerThan?="<" | largerOrEqualTo?=">=" | smallerOrEqualTo?="<=" | notEqualTo?="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//equalTo?="=="
		public Assignment getEqualToAssignment_0() { return cEqualToAssignment_0; }

		//"=="
		public Keyword getEqualToEqualsSignEqualsSignKeyword_0_0() { return cEqualToEqualsSignEqualsSignKeyword_0_0; }

		//largerThan?=">"
		public Assignment getLargerThanAssignment_1() { return cLargerThanAssignment_1; }

		//">"
		public Keyword getLargerThanGreaterThanSignKeyword_1_0() { return cLargerThanGreaterThanSignKeyword_1_0; }

		//smallerThan?="<"
		public Assignment getSmallerThanAssignment_2() { return cSmallerThanAssignment_2; }

		//"<"
		public Keyword getSmallerThanLessThanSignKeyword_2_0() { return cSmallerThanLessThanSignKeyword_2_0; }

		//largerOrEqualTo?=">="
		public Assignment getLargerOrEqualToAssignment_3() { return cLargerOrEqualToAssignment_3; }

		//">="
		public Keyword getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0() { return cLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0; }

		//smallerOrEqualTo?="<="
		public Assignment getSmallerOrEqualToAssignment_4() { return cSmallerOrEqualToAssignment_4; }

		//"<="
		public Keyword getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0() { return cSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0; }

		//notEqualTo?="!="
		public Assignment getNotEqualToAssignment_5() { return cNotEqualToAssignment_5; }

		//"!="
		public Keyword getNotEqualToExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualToExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSubjectiveAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSubjectiveQualifiedNameParserRuleCall_0_0_0 = (RuleCall)cSubjectiveAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cObjectiveAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cObjectiveExpressionParserRuleCall_0_2_0 = (RuleCall)cObjectiveAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cAndAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAndAndKeyword_1_0_0_0 = (Keyword)cAndAssignment_1_0_0.eContents().get(0);
		private final Assignment cOrAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0_1_0 = (Keyword)cOrAssignment_1_0_1.eContents().get(0);
		private final Assignment cCompareConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompareConditionConditionParserRuleCall_1_1_0 = (RuleCall)cCompareConditionAssignment_1_1.eContents().get(0);
		
		//Condition:
		//	(subjective=QualifiedName operator=Operator objective=Expression) ((and?="and" | or?="or")
		//	compareCondition=Condition)?;
		@Override public ParserRule getRule() { return rule; }

		//(subjective=QualifiedName operator=Operator objective=Expression) ((and?="and" | or?="or") compareCondition=Condition)?
		public Group getGroup() { return cGroup; }

		//subjective=QualifiedName operator=Operator objective=Expression
		public Group getGroup_0() { return cGroup_0; }

		//subjective=QualifiedName
		public Assignment getSubjectiveAssignment_0_0() { return cSubjectiveAssignment_0_0; }

		//QualifiedName
		public RuleCall getSubjectiveQualifiedNameParserRuleCall_0_0_0() { return cSubjectiveQualifiedNameParserRuleCall_0_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_0_1_0() { return cOperatorOperatorParserRuleCall_0_1_0; }

		//objective=Expression
		public Assignment getObjectiveAssignment_0_2() { return cObjectiveAssignment_0_2; }

		//Expression
		public RuleCall getObjectiveExpressionParserRuleCall_0_2_0() { return cObjectiveExpressionParserRuleCall_0_2_0; }

		//((and?="and" | or?="or") compareCondition=Condition)?
		public Group getGroup_1() { return cGroup_1; }

		//and?="and" | or?="or"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//and?="and"
		public Assignment getAndAssignment_1_0_0() { return cAndAssignment_1_0_0; }

		//"and"
		public Keyword getAndAndKeyword_1_0_0_0() { return cAndAndKeyword_1_0_0_0; }

		//or?="or"
		public Assignment getOrAssignment_1_0_1() { return cOrAssignment_1_0_1; }

		//"or"
		public Keyword getOrOrKeyword_1_0_1_0() { return cOrOrKeyword_1_0_1_0; }

		//compareCondition=Condition
		public Assignment getCompareConditionAssignment_1_1() { return cCompareConditionAssignment_1_1; }

		//Condition
		public RuleCall getCompareConditionConditionParserRuleCall_1_1_0() { return cCompareConditionConditionParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTermParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		/// *	Conditions:
		//		if|ifelse|while
		//	;
		//	
		//	if:
		//		'if' '('(condition=Condition)')'
		//		'{'(then+=Statement)+'}'
		//	;
		//	
		//	ifelse:
		//		'if' '('(condition=Condition)')'
		//		'{'(then+=Statement)+'}'
		//		('else' (elseif=ifelse|'{'(else+=Statement)+'}'))?
		//	;
		//	
		//	while:
		//		'while' '('(condition=Condition)')'
		//		'{'(then+=Statement)+'}'
		//	;
		// * / Expression:
		//	Term (({Plus.left=current} "+" | {Minus.left=current} "-") right=Term)*;
		@Override public ParserRule getRule() { return rule; }

		//Term (({Plus.left=current} "+" | {Minus.left=current} "-") right=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Term
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Term
		public RuleCall getRightTermParserRuleCall_1_1_0() { return cRightTermParserRuleCall_1_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplyLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Term:
		//	Factor (({Multiply.left=current} "*" | {Division.left=current} "/") right=Factor)*;
		@Override public ParserRule getRule() { return rule; }

		//Factor (({Multiply.left=current} "*" | {Division.left=current} "/") right=Factor)*
		public Group getGroup() { return cGroup; }

		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }

		//(({Multiply.left=current} "*" | {Division.left=current} "/") right=Factor)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiply.left=current} "*" | {Division.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiply.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_0_0() { return cMultiplyLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Division.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableQualifiedNameParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanBOOLEANTerminalRuleCall_3_0 = (RuleCall)cBooleanAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Factor:
		//	number=Number | variable=QualifiedName | string=STRING | boolean=BOOLEAN | "(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//number=Number | variable=QualifiedName | string=STRING | boolean=BOOLEAN | "(" expression=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }

		//variable=QualifiedName
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//QualifiedName
		public RuleCall getVariableQualifiedNameParserRuleCall_1_0() { return cVariableQualifiedNameParserRuleCall_1_0; }

		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }

		//boolean=BOOLEAN
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }

		//BOOLEAN
		public RuleCall getBooleanBOOLEANTerminalRuleCall_3_0() { return cBooleanBOOLEANTerminalRuleCall_3_0; }

		//"(" expression=Expression ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_0() { return cExpressionExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Number:
		//	INT;
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)* ("." INT)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)* ("." INT)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//("." INT)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class PlansElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plans");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlansKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlansAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlansPlanParserRuleCall_1_0 = (RuleCall)cPlansAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Plans:
		//	"Plans {" Plans+=Plan+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"Plans {" Plans+=Plan+ "}"
		public Group getGroup() { return cGroup; }

		//"Plans {"
		public Keyword getPlansKeyword_0() { return cPlansKeyword_0; }

		//Plans+=Plan+
		public Assignment getPlansAssignment_1() { return cPlansAssignment_1; }

		//Plan
		public RuleCall getPlansPlanParserRuleCall_1_0() { return cPlansPlanParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class PlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Plan:
		//	"Plan {" name=ID Body=Body Trigger=Trigger "}";
		@Override public ParserRule getRule() { return rule; }

		//"Plan {" name=ID Body=Body Trigger=Trigger "}"
		public Group getGroup() { return cGroup; }

		//"Plan {"
		public Keyword getPlanKeyword_0() { return cPlanKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Body=Body
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_2_0() { return cBodyBodyParserRuleCall_2_0; }

		//Trigger=Trigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_3_0() { return cTriggerTriggerParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Body:
		//	"Body {" STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"Body {" STRING "}"
		public Group getGroup() { return cGroup; }

		//"Body {"
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTriggerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEventAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cEventEventCrossReference_0_1_0 = (CrossReference)cEventAssignment_0_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_1_0_1 = (RuleCall)cEventEventCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cGoalAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cGoalGoalCrossReference_1_0_0 = (CrossReference)cGoalAssignment_1_0.eContents().get(0);
		private final RuleCall cGoalGoalIDTerminalRuleCall_1_0_0_1 = (RuleCall)cGoalGoalCrossReference_1_0_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Trigger:
		//	"Trigger {" Event=[Event] | Goal=[Goal] "}";
		@Override public ParserRule getRule() { return rule; }

		//"Trigger {" Event=[Event] | Goal=[Goal] "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Trigger {" Event=[Event]
		public Group getGroup_0() { return cGroup_0; }

		//"Trigger {"
		public Keyword getTriggerKeyword_0_0() { return cTriggerKeyword_0_0; }

		//Event=[Event]
		public Assignment getEventAssignment_0_1() { return cEventAssignment_0_1; }

		//[Event]
		public CrossReference getEventEventCrossReference_0_1_0() { return cEventEventCrossReference_0_1_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_1_0_1() { return cEventEventIDTerminalRuleCall_0_1_0_1; }

		//Goal=[Goal] "}"
		public Group getGroup_1() { return cGroup_1; }

		//Goal=[Goal]
		public Assignment getGoalAssignment_1_0() { return cGoalAssignment_1_0; }

		//[Goal]
		public CrossReference getGoalGoalCrossReference_1_0_0() { return cGoalGoalCrossReference_1_0_0; }

		//ID
		public RuleCall getGoalGoalIDTerminalRuleCall_1_0_0_1() { return cGoalGoalIDTerminalRuleCall_1_0_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}

	public class BeliefSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeliefSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBeliefSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBeliefSetBeliefParserRuleCall_2_0 = (RuleCall)cBeliefSetAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BeliefSet:
		//	"BeliefSet {" name=ID BeliefSet+=Belief+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"BeliefSet {" name=ID BeliefSet+=Belief+ "}"
		public Group getGroup() { return cGroup; }

		//"BeliefSet {"
		public Keyword getBeliefSetKeyword_0() { return cBeliefSetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//BeliefSet+=Belief+
		public Assignment getBeliefSetAssignment_2() { return cBeliefSetAssignment_2; }

		//Belief
		public RuleCall getBeliefSetBeliefParserRuleCall_2_0() { return cBeliefSetBeliefParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BeliefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Belief");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFactFactParserRuleCall_2_0 = (RuleCall)cFactAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Belief:
		//	"Belief {" name=ID Fact+=Fact* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Belief {" name=ID Fact+=Fact* "}"
		public Group getGroup() { return cGroup; }

		//"Belief {"
		public Keyword getBeliefKeyword_0() { return cBeliefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Fact+=Fact*
		public Assignment getFactAssignment_2() { return cFactAssignment_2; }

		//Fact
		public RuleCall getFactFactParserRuleCall_2_0() { return cFactFactParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementsParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Fact:
		//	"Fact {" Statements=Statements STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"Fact {" Statements=Statements STRING "}"
		public Group getGroup() { return cGroup; }

		//"Fact {"
		public Keyword getFactKeyword_0() { return cFactKeyword_0; }

		//Statements=Statements
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_1_0() { return cStatementsStatementsParserRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statements");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Statements:
		//	Statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }

		//Statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final RuleCall cCodeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//	Code;
		@Override public ParserRule getRule() { return rule; }

		//Code
		public RuleCall getCodeParserRuleCall() { return cCodeParserRuleCall; }
	}

	public class GoalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGoalsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGoalsGoalParserRuleCall_1_0 = (RuleCall)cGoalsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Goals:
		//	"Goals {" Goals+=Goal+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"Goals {" Goals+=Goal+ "}"
		public Group getGroup() { return cGroup; }

		//"Goals {"
		public Keyword getGoalsKeyword_0() { return cGoalsKeyword_0; }

		//Goals+=Goal+
		public Assignment getGoalsAssignment_1() { return cGoalsAssignment_1; }

		//Goal
		public RuleCall getGoalsGoalParserRuleCall_1_0() { return cGoalsGoalParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAchieveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMaintainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPerformParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Goal:
		//	Achieve | Query | Maintain | Perform;
		@Override public ParserRule getRule() { return rule; }

		//Achieve | Query | Maintain | Perform
		public Alternatives getAlternatives() { return cAlternatives; }

		//Achieve
		public RuleCall getAchieveParserRuleCall_0() { return cAchieveParserRuleCall_0; }

		//Query
		public RuleCall getQueryParserRuleCall_1() { return cQueryParserRuleCall_1; }

		//Maintain
		public RuleCall getMaintainParserRuleCall_2() { return cMaintainParserRuleCall_2; }

		//Perform
		public RuleCall getPerformParserRuleCall_3() { return cPerformParserRuleCall_3; }
	}

	public class AchieveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Achieve");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAchieveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Achieve:
		//	"Achieve {" name=ID Condition=Condition "}";
		@Override public ParserRule getRule() { return rule; }

		//"Achieve {" name=ID Condition=Condition "}"
		public Group getGroup() { return cGroup; }

		//"Achieve {"
		public Keyword getAchieveKeyword_0() { return cAchieveKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultResultParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Query:
		//	"Query {" name=ID Condition=Condition Result=Result "}";
		@Override public ParserRule getRule() { return rule; }

		//"Query {" name=ID Condition=Condition Result=Result "}"
		public Group getGroup() { return cGroup; }

		//"Query {"
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//Result=Result
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }

		//Result
		public RuleCall getResultResultParserRuleCall_3_0() { return cResultResultParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MaintainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Maintain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaintainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Maintain:
		//	"Maintain {" name=ID Condition=Condition "}";
		@Override public ParserRule getRule() { return rule; }

		//"Maintain {" name=ID Condition=Condition "}"
		public Group getGroup() { return cGroup; }

		//"Maintain {"
		public Keyword getMaintainKeyword_0() { return cMaintainKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PerformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Perform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPerformKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Perform:
		//	"Perform {" name=ID Condition=Condition "}";
		@Override public ParserRule getRule() { return rule; }

		//"Perform {" name=ID Condition=Condition "}"
		public Group getGroup() { return cGroup; }

		//"Perform {"
		public Keyword getPerformKeyword_0() { return cPerformKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Result");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Result:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final BDIElements pBDI;
	private final AgentElements pAgent;
	private final ImportsElements pImports;
	private final ImportElements pImport;
	private final FilenameElements pFilename;
	private final EventsElements pEvents;
	private final EventElements pEvent;
	private final ParametersElements pParameters;
	private final ParameterElements pParameter;
	private final ValueElements pValue;
	private final CodeElements pCode;
	private final OperatorElements pOperator;
	private final ConditionElements pCondition;
	private final ExpressionElements pExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final TerminalRule tNETWORK;
	private final TerminalRule tOCTET;
	private final NumberElements pNumber;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tBOOLEAN;
	private final PlansElements pPlans;
	private final PlanElements pPlan;
	private final BodyElements pBody;
	private final TriggerElements pTrigger;
	private final BeliefSetElements pBeliefSet;
	private final BeliefElements pBelief;
	private final FactElements pFact;
	private final StatementsElements pStatements;
	private final StatementElements pStatement;
	private final GoalsElements pGoals;
	private final GoalElements pGoal;
	private final AchieveElements pAchieve;
	private final QueryElements pQuery;
	private final MaintainElements pMaintain;
	private final PerformElements pPerform;
	private final ResultElements pResult;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBDI = new BDIElements();
		this.pAgent = new AgentElements();
		this.pImports = new ImportsElements();
		this.pImport = new ImportElements();
		this.pFilename = new FilenameElements();
		this.pEvents = new EventsElements();
		this.pEvent = new EventElements();
		this.pParameters = new ParametersElements();
		this.pParameter = new ParameterElements();
		this.pValue = new ValueElements();
		this.pCode = new CodeElements();
		this.pOperator = new OperatorElements();
		this.pCondition = new ConditionElements();
		this.pExpression = new ExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.tNETWORK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NETWORK");
		this.tOCTET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTET");
		this.pNumber = new NumberElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		this.pPlans = new PlansElements();
		this.pPlan = new PlanElements();
		this.pBody = new BodyElements();
		this.pTrigger = new TriggerElements();
		this.pBeliefSet = new BeliefSetElements();
		this.pBelief = new BeliefElements();
		this.pFact = new FactElements();
		this.pStatements = new StatementsElements();
		this.pStatement = new StatementElements();
		this.pGoals = new GoalsElements();
		this.pGoal = new GoalElements();
		this.pAchieve = new AchieveElements();
		this.pQuery = new QueryElements();
		this.pMaintain = new MaintainElements();
		this.pPerform = new PerformElements();
		this.pResult = new ResultElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BDI:
	//	"BDIModel {" Agents+=Agent+ "}";
	public BDIElements getBDIAccess() {
		return pBDI;
	}
	
	public ParserRule getBDIRule() {
		return getBDIAccess().getRule();
	}

	//Agent:
	//	"Agent" name=ID "{" Import+=Imports* Event+=Events* Parameters+=Parameters* Belief+=BeliefSet* Plan+=Plans* "}";
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//Imports:
	//	"Imports {" Imports+=Import+ "}";
	public ImportsElements getImportsAccess() {
		return pImports;
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	//Import:
	//	"Import {" Filename "}";
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Filename:
	//	STRING;
	public FilenameElements getFilenameAccess() {
		return pFilename;
	}
	
	public ParserRule getFilenameRule() {
		return getFilenameAccess().getRule();
	}

	//Events:
	//	"Events {" Events+=Event+ "}";
	public EventsElements getEventsAccess() {
		return pEvents;
	}
	
	public ParserRule getEventsRule() {
		return getEventsAccess().getRule();
	}

	//Event:
	//	"Event" name=ID "{" EventType=STRING Parameter+=Parameter* "}";
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Parameters:
	//	"Parameters {" Parameters+=Parameter+ "}";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//Parameter:
	//	"Parameter {" name=ID "=" Value "}";
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Value:
	//	"Value {" Code "}";
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Code:
	//	STRING | ID | BOOLEAN | Number | NETWORK;
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}

	//Operator:
	//	equalTo?="==" | largerThan?=">" | smallerThan?="<" | largerOrEqualTo?=">=" | smallerOrEqualTo?="<=" |
	//	notEqualTo?="!=";
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Condition:
	//	(subjective=QualifiedName operator=Operator objective=Expression) ((and?="and" | or?="or")
	//	compareCondition=Condition)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	/// *	Conditions:
	//		if|ifelse|while
	//	;
	//	
	//	if:
	//		'if' '('(condition=Condition)')'
	//		'{'(then+=Statement)+'}'
	//	;
	//	
	//	ifelse:
	//		'if' '('(condition=Condition)')'
	//		'{'(then+=Statement)+'}'
	//		('else' (elseif=ifelse|'{'(else+=Statement)+'}'))?
	//	;
	//	
	//	while:
	//		'while' '('(condition=Condition)')'
	//		'{'(then+=Statement)+'}'
	//	;
	// * / Expression:
	//	Term (({Plus.left=current} "+" | {Minus.left=current} "-") right=Term)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Term:
	//	Factor (({Multiply.left=current} "*" | {Division.left=current} "/") right=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Factor:
	//	number=Number | variable=QualifiedName | string=STRING | boolean=BOOLEAN | "(" expression=Expression ")";
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//terminal NETWORK:
	//	OCTET "." OCTET "." OCTET "." OCTET;
	public TerminalRule getNETWORKRule() {
		return tNETWORK;
	} 

	//terminal OCTET:
	//	"0".."9" | "1".."9" "0".."9" | "1" "0".."9" "0".."9" | "2" "0".."5" "0".."5";
	public TerminalRule getOCTETRule() {
		return tOCTET;
	} 

	//Number:
	//	INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)* ("." INT)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"false" | "true";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//Plans:
	//	"Plans {" Plans+=Plan+ "}";
	public PlansElements getPlansAccess() {
		return pPlans;
	}
	
	public ParserRule getPlansRule() {
		return getPlansAccess().getRule();
	}

	//Plan:
	//	"Plan {" name=ID Body=Body Trigger=Trigger "}";
	public PlanElements getPlanAccess() {
		return pPlan;
	}
	
	public ParserRule getPlanRule() {
		return getPlanAccess().getRule();
	}

	//Body:
	//	"Body {" STRING "}";
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//Trigger:
	//	"Trigger {" Event=[Event] | Goal=[Goal] "}";
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//BeliefSet:
	//	"BeliefSet {" name=ID BeliefSet+=Belief+ "}";
	public BeliefSetElements getBeliefSetAccess() {
		return pBeliefSet;
	}
	
	public ParserRule getBeliefSetRule() {
		return getBeliefSetAccess().getRule();
	}

	//Belief:
	//	"Belief {" name=ID Fact+=Fact* "}";
	public BeliefElements getBeliefAccess() {
		return pBelief;
	}
	
	public ParserRule getBeliefRule() {
		return getBeliefAccess().getRule();
	}

	//Fact:
	//	"Fact {" Statements=Statements STRING "}";
	public FactElements getFactAccess() {
		return pFact;
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}

	//Statements:
	//	Statements+=Statement+;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}

	//Statement:
	//	Code;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Goals:
	//	"Goals {" Goals+=Goal+ "}";
	public GoalsElements getGoalsAccess() {
		return pGoals;
	}
	
	public ParserRule getGoalsRule() {
		return getGoalsAccess().getRule();
	}

	//Goal:
	//	Achieve | Query | Maintain | Perform;
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//Achieve:
	//	"Achieve {" name=ID Condition=Condition "}";
	public AchieveElements getAchieveAccess() {
		return pAchieve;
	}
	
	public ParserRule getAchieveRule() {
		return getAchieveAccess().getRule();
	}

	//Query:
	//	"Query {" name=ID Condition=Condition Result=Result "}";
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Maintain:
	//	"Maintain {" name=ID Condition=Condition "}";
	public MaintainElements getMaintainAccess() {
		return pMaintain;
	}
	
	public ParserRule getMaintainRule() {
		return getMaintainAccess().getRule();
	}

	//Perform:
	//	"Perform {" name=ID Condition=Condition "}";
	public PerformElements getPerformAccess() {
		return pPerform;
	}
	
	public ParserRule getPerformRule() {
		return getPerformAccess().getRule();
	}

	//Result:
	//	STRING;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
