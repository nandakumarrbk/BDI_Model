/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BDIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BDI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBDIModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAgentsAgentParserRuleCall_1_0 = (RuleCall)cAgentsAssignment_1.eContents().get(0);
		private final Keyword cBDIModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BDI:
		//	"<BDIModel>" Agents+=Agent+ "</BDIModel>";
		@Override public ParserRule getRule() { return rule; }

		//"<BDIModel>" Agents+=Agent+ "</BDIModel>"
		public Group getGroup() { return cGroup; }

		//"<BDIModel>"
		public Keyword getBDIModelKeyword_0() { return cBDIModelKeyword_0; }

		//Agents+=Agent+
		public Assignment getAgentsAssignment_1() { return cAgentsAssignment_1; }

		//Agent
		public RuleCall getAgentsAgentParserRuleCall_1_0() { return cAgentsAgentParserRuleCall_1_0; }

		//"</BDIModel>"
		public Keyword getBDIModelKeyword_2() { return cBDIModelKeyword_2; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportImportsParserRuleCall_2_0 = (RuleCall)cImportAssignment_2.eContents().get(0);
		private final Assignment cBeliefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBeliefBeliefSetParserRuleCall_3_0 = (RuleCall)cBeliefAssignment_3.eContents().get(0);
		private final Assignment cPlanAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPlanPlansParserRuleCall_4_0 = (RuleCall)cPlanAssignment_4.eContents().get(0);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventEventsParserRuleCall_5_0 = (RuleCall)cEventAssignment_5.eContents().get(0);
		private final Assignment cParametersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParametersParametersParserRuleCall_6_0 = (RuleCall)cParametersAssignment_6.eContents().get(0);
		private final Keyword cAgentKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Agent:
		//	"<Agent>" name=ID Import+=Imports* Belief+=BeliefSet* Plan+=Plans* Event+=Events* Parameters+=Parameters* "</Agent>";
		@Override public ParserRule getRule() { return rule; }

		//"<Agent>" name=ID Import+=Imports* Belief+=BeliefSet* Plan+=Plans* Event+=Events* Parameters+=Parameters* "</Agent>"
		public Group getGroup() { return cGroup; }

		//"<Agent>"
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Import+=Imports*
		public Assignment getImportAssignment_2() { return cImportAssignment_2; }

		//Imports
		public RuleCall getImportImportsParserRuleCall_2_0() { return cImportImportsParserRuleCall_2_0; }

		//Belief+=BeliefSet*
		public Assignment getBeliefAssignment_3() { return cBeliefAssignment_3; }

		//BeliefSet
		public RuleCall getBeliefBeliefSetParserRuleCall_3_0() { return cBeliefBeliefSetParserRuleCall_3_0; }

		//Plan+=Plans*
		public Assignment getPlanAssignment_4() { return cPlanAssignment_4; }

		//Plans
		public RuleCall getPlanPlansParserRuleCall_4_0() { return cPlanPlansParserRuleCall_4_0; }

		//Event+=Events*
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }

		//Events
		public RuleCall getEventEventsParserRuleCall_5_0() { return cEventEventsParserRuleCall_5_0; }

		//Parameters+=Parameters*
		public Assignment getParametersAssignment_6() { return cParametersAssignment_6; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_6_0() { return cParametersParametersParserRuleCall_6_0; }

		//"</Agent>"
		public Keyword getAgentKeyword_7() { return cAgentKeyword_7; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Keyword cImportsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Imports:
		//	"<Imports>" Imports+=Import+ "</Imports>";
		@Override public ParserRule getRule() { return rule; }

		//"<Imports>" Imports+=Import+ "</Imports>"
		public Group getGroup() { return cGroup; }

		//"<Imports>"
		public Keyword getImportsKeyword_0() { return cImportsKeyword_0; }

		//Imports+=Import+
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//"</Imports>"
		public Keyword getImportsKeyword_2() { return cImportsKeyword_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFilenameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cImportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	"<Import>" Filename "</Import>";
		@Override public ParserRule getRule() { return rule; }

		//"<Import>" Filename "</Import>"
		public Group getGroup() { return cGroup; }

		//"<Import>"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//Filename
		public RuleCall getFilenameParserRuleCall_1() { return cFilenameParserRuleCall_1; }

		//"</Import>"
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }
	}

	public class FilenameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Filename");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Filename:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class EventsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Events");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		private final Keyword cEventsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Events:
		//	"<Event>" Events+=Event+ "</Events>";
		@Override public ParserRule getRule() { return rule; }

		//"<Event>" Events+=Event+ "</Events>"
		public Group getGroup() { return cGroup; }

		//"<Event>"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//Events+=Event+
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }

		//Event
		public RuleCall getEventsEventParserRuleCall_1_0() { return cEventsEventParserRuleCall_1_0; }

		//"</Events>"
		public Keyword getEventsKeyword_2() { return cEventsKeyword_2; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEventTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventTypeSTRINGTerminalRuleCall_2_0 = (RuleCall)cEventTypeAssignment_2.eContents().get(0);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterParameterParserRuleCall_3_0 = (RuleCall)cParameterAssignment_3.eContents().get(0);
		private final Keyword cEventKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Event:
		//	"<Event>" name=ID EventType=STRING Parameter+=Parameter* "</Event>";
		@Override public ParserRule getRule() { return rule; }

		//"<Event>" name=ID EventType=STRING Parameter+=Parameter* "</Event>"
		public Group getGroup() { return cGroup; }

		//"<Event>"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//EventType=STRING
		public Assignment getEventTypeAssignment_2() { return cEventTypeAssignment_2; }

		//STRING
		public RuleCall getEventTypeSTRINGTerminalRuleCall_2_0() { return cEventTypeSTRINGTerminalRuleCall_2_0; }

		//Parameter+=Parameter*
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_3_0() { return cParameterParameterParserRuleCall_3_0; }

		//"</Event>"
		public Keyword getEventKeyword_4() { return cEventKeyword_4; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Keyword cParametersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"<Parameters>" Parameters+=Parameter+ "</Parameters>";
		@Override public ParserRule getRule() { return rule; }

		//"<Parameters>" Parameters+=Parameter+ "</Parameters>"
		public Group getGroup() { return cGroup; }

		//"<Parameters>"
		public Keyword getParametersKeyword_0() { return cParametersKeyword_0; }

		//Parameters+=Parameter+
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0() { return cParametersParameterParserRuleCall_1_0; }

		//"</Parameters>"
		public Keyword getParametersKeyword_2() { return cParametersKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cParameterKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//	"<Parameter>" name=ID Value "</Parameter>";
		@Override public ParserRule getRule() { return rule; }

		//"<Parameter>" name=ID Value "</Parameter>"
		public Group getGroup() { return cGroup; }

		//"<Parameter>"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Value
		public RuleCall getValueParserRuleCall_2() { return cValueParserRuleCall_2; }

		//"</Parameter>"
		public Keyword getParameterKeyword_3() { return cParameterKeyword_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCodeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Value:
		//	"<Value>" Code "</Value>";
		@Override public ParserRule getRule() { return rule; }

		//"<Value>" Code "</Value>"
		public Group getGroup() { return cGroup; }

		//"<Value>"
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }

		//Code
		public RuleCall getCodeParserRuleCall_1() { return cCodeParserRuleCall_1; }

		//"</Value>"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
	}

	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Code");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Code: //Code is actual code not just a string
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		////Code is actual code not just a string
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class PlansElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plans");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlansKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlansAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlansPlanParserRuleCall_1_0 = (RuleCall)cPlansAssignment_1.eContents().get(0);
		private final Keyword cPlansKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Plans:
		//	"<Plans>" Plans+=Plan+ "</Plans>";
		@Override public ParserRule getRule() { return rule; }

		//"<Plans>" Plans+=Plan+ "</Plans>"
		public Group getGroup() { return cGroup; }

		//"<Plans>"
		public Keyword getPlansKeyword_0() { return cPlansKeyword_0; }

		//Plans+=Plan+
		public Assignment getPlansAssignment_1() { return cPlansAssignment_1; }

		//Plan
		public RuleCall getPlansPlanParserRuleCall_1_0() { return cPlansPlanParserRuleCall_1_0; }

		//"</Plans>"
		public Keyword getPlansKeyword_2() { return cPlansKeyword_2; }
	}

	public class PlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Keyword cPlanKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Plan:
		//	"<Plan>" name=ID Body=Body Trigger=Trigger "</Plan>";
		@Override public ParserRule getRule() { return rule; }

		//"<Plan>" name=ID Body=Body Trigger=Trigger "</Plan>"
		public Group getGroup() { return cGroup; }

		//"<Plan>"
		public Keyword getPlanKeyword_0() { return cPlanKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Body=Body
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_2_0() { return cBodyBodyParserRuleCall_2_0; }

		//Trigger=Trigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_3_0() { return cTriggerTriggerParserRuleCall_3_0; }

		//"</Plan>"
		public Keyword getPlanKeyword_4() { return cPlanKeyword_4; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cBodyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Body:
		//	"<Body>" STRING "</Body>";
		@Override public ParserRule getRule() { return rule; }

		//"<Body>" STRING "</Body>"
		public Group getGroup() { return cGroup; }

		//"<Body>"
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//"</Body>"
		public Keyword getBodyKeyword_2() { return cBodyKeyword_2; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTriggerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cEventParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cGoalParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cTriggerKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Trigger:
		//	"<Trigger>" Event | Goal "</Trigger>";
		@Override public ParserRule getRule() { return rule; }

		//"<Trigger>" Event | Goal "</Trigger>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<Trigger>" Event
		public Group getGroup_0() { return cGroup_0; }

		//"<Trigger>"
		public Keyword getTriggerKeyword_0_0() { return cTriggerKeyword_0_0; }

		//Event
		public RuleCall getEventParserRuleCall_0_1() { return cEventParserRuleCall_0_1; }

		//Goal "</Trigger>"
		public Group getGroup_1() { return cGroup_1; }

		//Goal
		public RuleCall getGoalParserRuleCall_1_0() { return cGoalParserRuleCall_1_0; }

		//"</Trigger>"
		public Keyword getTriggerKeyword_1_1() { return cTriggerKeyword_1_1; }
	}

	public class BeliefSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeliefSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBeliefSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBeliefSetBeliefParserRuleCall_2_0 = (RuleCall)cBeliefSetAssignment_2.eContents().get(0);
		private final Keyword cBeliefSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BeliefSet:
		//	"<BeliefSet>" name=ID BeliefSet+=Belief+ "</BeliefSet>";
		@Override public ParserRule getRule() { return rule; }

		//"<BeliefSet>" name=ID BeliefSet+=Belief+ "</BeliefSet>"
		public Group getGroup() { return cGroup; }

		//"<BeliefSet>"
		public Keyword getBeliefSetKeyword_0() { return cBeliefSetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//BeliefSet+=Belief+
		public Assignment getBeliefSetAssignment_2() { return cBeliefSetAssignment_2; }

		//Belief
		public RuleCall getBeliefSetBeliefParserRuleCall_2_0() { return cBeliefSetBeliefParserRuleCall_2_0; }

		//"</BeliefSet>"
		public Keyword getBeliefSetKeyword_3() { return cBeliefSetKeyword_3; }
	}

	public class BeliefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Belief");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFactFactParserRuleCall_2_0 = (RuleCall)cFactAssignment_2.eContents().get(0);
		private final Keyword cBeliefKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Belief:
		//	"<Belief>" name=ID Fact+=Fact* "</Belief>";
		@Override public ParserRule getRule() { return rule; }

		//"<Belief>" name=ID Fact+=Fact* "</Belief>"
		public Group getGroup() { return cGroup; }

		//"<Belief>"
		public Keyword getBeliefKeyword_0() { return cBeliefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Fact+=Fact*
		public Assignment getFactAssignment_2() { return cFactAssignment_2; }

		//Fact
		public RuleCall getFactFactParserRuleCall_2_0() { return cFactFactParserRuleCall_2_0; }

		//"</Belief>"
		public Keyword getBeliefKeyword_3() { return cBeliefKeyword_3; }
	}

	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementsParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFactKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Fact:
		//	"<Fact>" Statements=Statements STRING "</Fact>";
		@Override public ParserRule getRule() { return rule; }

		//"<Fact>" Statements=Statements STRING "</Fact>"
		public Group getGroup() { return cGroup; }

		//"<Fact>"
		public Keyword getFactKeyword_0() { return cFactKeyword_0; }

		//Statements=Statements
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_1_0() { return cStatementsStatementsParserRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//"</Fact>"
		public Keyword getFactKeyword_3() { return cFactKeyword_3; }
	}

	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statements");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Statements:
		//	Statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }

		//Statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final RuleCall cCodeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//	Code;
		@Override public ParserRule getRule() { return rule; }

		//Code
		public RuleCall getCodeParserRuleCall() { return cCodeParserRuleCall; }
	}

	public class GoalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGoalsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGoalsGoalParserRuleCall_1_0 = (RuleCall)cGoalsAssignment_1.eContents().get(0);
		private final Keyword cGoalsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Goals:
		//	"<Goals>" Goals+=Goal+ "</Goals>";
		@Override public ParserRule getRule() { return rule; }

		//"<Goals>" Goals+=Goal+ "</Goals>"
		public Group getGroup() { return cGroup; }

		//"<Goals>"
		public Keyword getGoalsKeyword_0() { return cGoalsKeyword_0; }

		//Goals+=Goal+
		public Assignment getGoalsAssignment_1() { return cGoalsAssignment_1; }

		//Goal
		public RuleCall getGoalsGoalParserRuleCall_1_0() { return cGoalsGoalParserRuleCall_1_0; }

		//"</Goals>"
		public Keyword getGoalsKeyword_2() { return cGoalsKeyword_2; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAchieveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMaintainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPerformParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Goal:
		//	Achieve | Query | Maintain | Perform;
		@Override public ParserRule getRule() { return rule; }

		//Achieve | Query | Maintain | Perform
		public Alternatives getAlternatives() { return cAlternatives; }

		//Achieve
		public RuleCall getAchieveParserRuleCall_0() { return cAchieveParserRuleCall_0; }

		//Query
		public RuleCall getQueryParserRuleCall_1() { return cQueryParserRuleCall_1; }

		//Maintain
		public RuleCall getMaintainParserRuleCall_2() { return cMaintainParserRuleCall_2; }

		//Perform
		public RuleCall getPerformParserRuleCall_3() { return cPerformParserRuleCall_3; }
	}

	public class AchieveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Achieve");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAchieveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cAchieveKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Achieve:
		//	"<Achieve>" name=ID Condition=Condition "</Achieve>";
		@Override public ParserRule getRule() { return rule; }

		//"<Achieve>" name=ID Condition=Condition "</Achieve>"
		public Group getGroup() { return cGroup; }

		//"<Achieve>"
		public Keyword getAchieveKeyword_0() { return cAchieveKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//"</Achieve>"
		public Keyword getAchieveKeyword_3() { return cAchieveKeyword_3; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultResultParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		private final Keyword cQueryKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Query:
		//	"<Query>" name=ID Condition=Condition Result=Result "</Query>";
		@Override public ParserRule getRule() { return rule; }

		//"<Query>" name=ID Condition=Condition Result=Result "</Query>"
		public Group getGroup() { return cGroup; }

		//"<Query>"
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//Result=Result
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }

		//Result
		public RuleCall getResultResultParserRuleCall_3_0() { return cResultResultParserRuleCall_3_0; }

		//"</Query>"
		public Keyword getQueryKeyword_4() { return cQueryKeyword_4; }
	}

	public class MaintainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Maintain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaintainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cMaintainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Maintain:
		//	"<Maintain>" name=ID Condition=Condition "</Maintain>";
		@Override public ParserRule getRule() { return rule; }

		//"<Maintain>" name=ID Condition=Condition "</Maintain>"
		public Group getGroup() { return cGroup; }

		//"<Maintain>"
		public Keyword getMaintainKeyword_0() { return cMaintainKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//"</Maintain>"
		public Keyword getMaintainKeyword_3() { return cMaintainKeyword_3; }
	}

	public class PerformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Perform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPerformKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cPerformKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Perform:
		//	"<Perform>" name=ID Condition=Condition "</Perform>";
		@Override public ParserRule getRule() { return rule; }

		//"<Perform>" name=ID Condition=Condition "</Perform>"
		public Group getGroup() { return cGroup; }

		//"<Perform>"
		public Keyword getPerformKeyword_0() { return cPerformKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//Condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }

		//"</Perform>"
		public Keyword getPerformKeyword_3() { return cPerformKeyword_3; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Condition:
		//	"<Condition>" Statements+=Statement+ "</Condition>";
		@Override public ParserRule getRule() { return rule; }

		//"<Condition>" Statements+=Statement+ "</Condition>"
		public Group getGroup() { return cGroup; }

		//"<Condition>"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//Statements+=Statement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }

		//"</Condition>"
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
	}

	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Result");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Result:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final BDIElements pBDI;
	private final AgentElements pAgent;
	private final ImportsElements pImports;
	private final ImportElements pImport;
	private final FilenameElements pFilename;
	private final EventsElements pEvents;
	private final EventElements pEvent;
	private final ParametersElements pParameters;
	private final ParameterElements pParameter;
	private final ValueElements pValue;
	private final CodeElements pCode;
	private final PlansElements pPlans;
	private final PlanElements pPlan;
	private final BodyElements pBody;
	private final TriggerElements pTrigger;
	private final BeliefSetElements pBeliefSet;
	private final BeliefElements pBelief;
	private final FactElements pFact;
	private final StatementsElements pStatements;
	private final StatementElements pStatement;
	private final GoalsElements pGoals;
	private final GoalElements pGoal;
	private final AchieveElements pAchieve;
	private final QueryElements pQuery;
	private final MaintainElements pMaintain;
	private final PerformElements pPerform;
	private final ConditionElements pCondition;
	private final ResultElements pResult;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBDI = new BDIElements();
		this.pAgent = new AgentElements();
		this.pImports = new ImportsElements();
		this.pImport = new ImportElements();
		this.pFilename = new FilenameElements();
		this.pEvents = new EventsElements();
		this.pEvent = new EventElements();
		this.pParameters = new ParametersElements();
		this.pParameter = new ParameterElements();
		this.pValue = new ValueElements();
		this.pCode = new CodeElements();
		this.pPlans = new PlansElements();
		this.pPlan = new PlanElements();
		this.pBody = new BodyElements();
		this.pTrigger = new TriggerElements();
		this.pBeliefSet = new BeliefSetElements();
		this.pBelief = new BeliefElements();
		this.pFact = new FactElements();
		this.pStatements = new StatementsElements();
		this.pStatement = new StatementElements();
		this.pGoals = new GoalsElements();
		this.pGoal = new GoalElements();
		this.pAchieve = new AchieveElements();
		this.pQuery = new QueryElements();
		this.pMaintain = new MaintainElements();
		this.pPerform = new PerformElements();
		this.pCondition = new ConditionElements();
		this.pResult = new ResultElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BDI:
	//	"<BDIModel>" Agents+=Agent+ "</BDIModel>";
	public BDIElements getBDIAccess() {
		return pBDI;
	}
	
	public ParserRule getBDIRule() {
		return getBDIAccess().getRule();
	}

	//Agent:
	//	"<Agent>" name=ID Import+=Imports* Belief+=BeliefSet* Plan+=Plans* Event+=Events* Parameters+=Parameters* "</Agent>";
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//Imports:
	//	"<Imports>" Imports+=Import+ "</Imports>";
	public ImportsElements getImportsAccess() {
		return pImports;
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	//Import:
	//	"<Import>" Filename "</Import>";
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Filename:
	//	STRING;
	public FilenameElements getFilenameAccess() {
		return pFilename;
	}
	
	public ParserRule getFilenameRule() {
		return getFilenameAccess().getRule();
	}

	//Events:
	//	"<Event>" Events+=Event+ "</Events>";
	public EventsElements getEventsAccess() {
		return pEvents;
	}
	
	public ParserRule getEventsRule() {
		return getEventsAccess().getRule();
	}

	//Event:
	//	"<Event>" name=ID EventType=STRING Parameter+=Parameter* "</Event>";
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Parameters:
	//	"<Parameters>" Parameters+=Parameter+ "</Parameters>";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//Parameter:
	//	"<Parameter>" name=ID Value "</Parameter>";
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Value:
	//	"<Value>" Code "</Value>";
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Code: //Code is actual code not just a string
	//	STRING;
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}

	//Plans:
	//	"<Plans>" Plans+=Plan+ "</Plans>";
	public PlansElements getPlansAccess() {
		return pPlans;
	}
	
	public ParserRule getPlansRule() {
		return getPlansAccess().getRule();
	}

	//Plan:
	//	"<Plan>" name=ID Body=Body Trigger=Trigger "</Plan>";
	public PlanElements getPlanAccess() {
		return pPlan;
	}
	
	public ParserRule getPlanRule() {
		return getPlanAccess().getRule();
	}

	//Body:
	//	"<Body>" STRING "</Body>";
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//Trigger:
	//	"<Trigger>" Event | Goal "</Trigger>";
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//BeliefSet:
	//	"<BeliefSet>" name=ID BeliefSet+=Belief+ "</BeliefSet>";
	public BeliefSetElements getBeliefSetAccess() {
		return pBeliefSet;
	}
	
	public ParserRule getBeliefSetRule() {
		return getBeliefSetAccess().getRule();
	}

	//Belief:
	//	"<Belief>" name=ID Fact+=Fact* "</Belief>";
	public BeliefElements getBeliefAccess() {
		return pBelief;
	}
	
	public ParserRule getBeliefRule() {
		return getBeliefAccess().getRule();
	}

	//Fact:
	//	"<Fact>" Statements=Statements STRING "</Fact>";
	public FactElements getFactAccess() {
		return pFact;
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}

	//Statements:
	//	Statements+=Statement+;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}

	//Statement:
	//	Code;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Goals:
	//	"<Goals>" Goals+=Goal+ "</Goals>";
	public GoalsElements getGoalsAccess() {
		return pGoals;
	}
	
	public ParserRule getGoalsRule() {
		return getGoalsAccess().getRule();
	}

	//Goal:
	//	Achieve | Query | Maintain | Perform;
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//Achieve:
	//	"<Achieve>" name=ID Condition=Condition "</Achieve>";
	public AchieveElements getAchieveAccess() {
		return pAchieve;
	}
	
	public ParserRule getAchieveRule() {
		return getAchieveAccess().getRule();
	}

	//Query:
	//	"<Query>" name=ID Condition=Condition Result=Result "</Query>";
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Maintain:
	//	"<Maintain>" name=ID Condition=Condition "</Maintain>";
	public MaintainElements getMaintainAccess() {
		return pMaintain;
	}
	
	public ParserRule getMaintainRule() {
		return getMaintainAccess().getRule();
	}

	//Perform:
	//	"<Perform>" name=ID Condition=Condition "</Perform>";
	public PerformElements getPerformAccess() {
		return pPerform;
	}
	
	public ParserRule getPerformRule() {
		return getPerformAccess().getRule();
	}

	//Condition:
	//	"<Condition>" Statements+=Statement+ "</Condition>";
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Result:
	//	STRING;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
