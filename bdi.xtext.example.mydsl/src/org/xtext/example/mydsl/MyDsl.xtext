grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

	BDI:
		'BDIModel {'
			(Agents+=Agent)+
		'}'
	;
	
	Agent:
			'Agent' name=ID '{' 
			(Import+=Imports)*
			(Event+=Events)*
			(Parameters += Parameters)*
			(Belief+=BeliefSet)*
			(Plan+=Plans)*
		'}'
	;
	
	Imports:
		'Imports {'
		(Imports+=Import)+
		'}'
	;
	
	Import:
		'Import {'
		Filename
		'}'
	;
	
	Filename:
		STRING
	;
		
	Events:
		'Events {'
		(Events+=Event)+
		'}'
	;
			
	Event:
    	'Event' name=ID '{' 
    	EventType=STRING
    	(Parameter+=Parameter)*
    	'}'
    ;
    
    Parameters:
    	'Parameters {'
    	(Parameters+=Parameter)+
    	'}'
    ;
    
    Parameter:
    	'Parameter {' 
    	name=ID'='Value
    	'}'
    ;
    
    Value:
    	'Value {'
    	Code
    	'}'
    ;
    
    Code:
    	STRING | ID | BOOLEAN | Number | NETWORK 
    ;
    
    	Operator:
	(equalTo?='==')|(largerThan?='>')|(smallerThan?='<')
	|(largerOrEqualTo?='>=')|(smallerOrEqualTo?='<=')|(notEqualTo?='!=')
	;
	
	Condition:
	(subjective=QualifiedName operator=Operator objective= Expression)
	(((and?='and')|(or?='or')) compareCondition=Condition)?
	;
	
/*	Conditions:
		if|ifelse|while
	;
	
	if:
		'if' '('(condition=Condition)')'
		'{'(then+=Statement)+'}'
	;
	
	ifelse:
		'if' '('(condition=Condition)')'
		'{'(then+=Statement)+'}'
		('else' (elseif=ifelse|'{'(else+=Statement)+'}'))?
	;
	
	while:
		'while' '('(condition=Condition)')'
		'{'(then+=Statement)+'}'
	;
*/
	Expression:
	Term (({Plus.left=current}'+'|{Minus.left=current}'-') right=Term)*
	;
	Term:
	Factor (({Multiply.left=current} '*'| {Division.left=current}'/') right=Factor)*
	;
	Factor:
	number=Number|variable=QualifiedName|string=STRING |boolean=BOOLEAN|('(' expression=Expression ')')
	;
    
   terminal NETWORK returns ecore::EString:
	(OCTET'.'OCTET'.'OCTET'.'OCTET)
    ;
    
    terminal OCTET returns ecore::EString:
	('0'..'9')|(('1'..'9')('0'..'9'))|('1'('0'..'9')('0'..'9'))| ('2'('0'..'5')('0'..'5'))
	;
    
    Number:
	INT
	;

	QualifiedName:
	ID ('.' ID)*('.' INT)*
	;

	terminal BOOLEAN returns ecore::EBoolean:
	'false'|'true'
	;
    
    
    Plans:
    'Plans {'	
	(Plans+=Plan)+
	'}'
    ;
    
     Plan:
    	'Plan {' name=ID
    	PriorityValue=INT
    	Body=Body
    	Trigger=Trigger
    	'}'
    ;
    
    Body:
    	'Body {'
    	STRING
    	'}'
    ;
    
    Trigger:
    	'Trigger {'
    		Event=[Event] | Goal=[Goal]
    	'}'
    ;
    
 	BeliefSet:
        'BeliefSet {' name=ID
        (BeliefSet+=Belief)+
        '}'
    ;
    
    Belief:
      'Belief {' name=ID
        beliefGoal=[Goal]
        beliefValidate=[Event]
       (Fact+=Fact)*
       '}'
    ;
    
     Fact:
     	'Fact {'
   		Statements=Statements
   		STRING
   		'}'
	;
	
	Statements:
		(Statements+=Statement)+
	;
	
	Statement:
		Code
	;

	Goals:
		'Goals {'
		(Goals+=Goal)+
		'}'
	;
    
    Goal:
    	Achieve | Query | Maintain | Perform
	;
	
	Achieve:
		'Achieve {' name=ID
		Goalplan=[Plan]
        Condition=Condition
       '}'
	;
	
	Query:
		'Query {' name=ID
		Goalplan=[Plan]
        Condition=Condition
        Result=Result
        '}'
	;
	
	Maintain:
		'Maintain {' name=ID
		Goalplan=[Plan]
        Condition=Condition
		'}'
	;
	
	Perform:
		'Perform {' name=ID
		Goalplan=[Plan]
        Condition=Condition
        '}'
	;
	
	Result:
		STRING
	;

