/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleBDI
entryRuleBDI 
:
{ before(grammarAccess.getBDIRule()); }
	 ruleBDI
{ after(grammarAccess.getBDIRule()); } 
	 EOF 
;

// Rule BDI
ruleBDI
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBDIAccess().getGroup()); }
(rule__BDI__Group__0)
{ after(grammarAccess.getBDIAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAgent
entryRuleAgent 
:
{ before(grammarAccess.getAgentRule()); }
	 ruleAgent
{ after(grammarAccess.getAgentRule()); } 
	 EOF 
;

// Rule Agent
ruleAgent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAgentAccess().getGroup()); }
(rule__Agent__Group__0)
{ after(grammarAccess.getAgentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImports
entryRuleImports 
:
{ before(grammarAccess.getImportsRule()); }
	 ruleImports
{ after(grammarAccess.getImportsRule()); } 
	 EOF 
;

// Rule Imports
ruleImports
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportsAccess().getGroup()); }
(rule__Imports__Group__0)
{ after(grammarAccess.getImportsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFilename
entryRuleFilename 
:
{ before(grammarAccess.getFilenameRule()); }
	 ruleFilename
{ after(grammarAccess.getFilenameRule()); } 
	 EOF 
;

// Rule Filename
ruleFilename
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFilenameAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getFilenameAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvents
entryRuleEvents 
:
{ before(grammarAccess.getEventsRule()); }
	 ruleEvents
{ after(grammarAccess.getEventsRule()); } 
	 EOF 
;

// Rule Events
ruleEvents
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventsAccess().getGroup()); }
(rule__Events__Group__0)
{ after(grammarAccess.getEventsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameters
entryRuleParameters 
:
{ before(grammarAccess.getParametersRule()); }
	 ruleParameters
{ after(grammarAccess.getParametersRule()); } 
	 EOF 
;

// Rule Parameters
ruleParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParametersAccess().getGroup()); }
(rule__Parameters__Group__0)
{ after(grammarAccess.getParametersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getGroup()); }
(rule__Value__Group__0)
{ after(grammarAccess.getValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCode
entryRuleCode 
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCodeAccess().getAlternatives()); }
(rule__Code__Alternatives)
{ after(grammarAccess.getCodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperator
entryRuleOperator 
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactor
entryRuleFactor 
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactorAccess().getAlternatives()); }
(rule__Factor__Alternatives)
{ after(grammarAccess.getFactorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlans
entryRulePlans 
:
{ before(grammarAccess.getPlansRule()); }
	 rulePlans
{ after(grammarAccess.getPlansRule()); } 
	 EOF 
;

// Rule Plans
rulePlans
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlansAccess().getGroup()); }
(rule__Plans__Group__0)
{ after(grammarAccess.getPlansAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlan
entryRulePlan 
:
{ before(grammarAccess.getPlanRule()); }
	 rulePlan
{ after(grammarAccess.getPlanRule()); } 
	 EOF 
;

// Rule Plan
rulePlan
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlanAccess().getGroup()); }
(rule__Plan__Group__0)
{ after(grammarAccess.getPlanAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBody
entryRuleBody 
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBodyAccess().getGroup()); }
(rule__Body__Group__0)
{ after(grammarAccess.getBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrigger
entryRuleTrigger 
:
{ before(grammarAccess.getTriggerRule()); }
	 ruleTrigger
{ after(grammarAccess.getTriggerRule()); } 
	 EOF 
;

// Rule Trigger
ruleTrigger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTriggerAccess().getAlternatives()); }
(rule__Trigger__Alternatives)
{ after(grammarAccess.getTriggerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBeliefSet
entryRuleBeliefSet 
:
{ before(grammarAccess.getBeliefSetRule()); }
	 ruleBeliefSet
{ after(grammarAccess.getBeliefSetRule()); } 
	 EOF 
;

// Rule BeliefSet
ruleBeliefSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBeliefSetAccess().getGroup()); }
(rule__BeliefSet__Group__0)
{ after(grammarAccess.getBeliefSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBelief
entryRuleBelief 
:
{ before(grammarAccess.getBeliefRule()); }
	 ruleBelief
{ after(grammarAccess.getBeliefRule()); } 
	 EOF 
;

// Rule Belief
ruleBelief
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBeliefAccess().getGroup()); }
(rule__Belief__Group__0)
{ after(grammarAccess.getBeliefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFact
entryRuleFact 
:
{ before(grammarAccess.getFactRule()); }
	 ruleFact
{ after(grammarAccess.getFactRule()); } 
	 EOF 
;

// Rule Fact
ruleFact
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactAccess().getGroup()); }
(rule__Fact__Group__0)
{ after(grammarAccess.getFactAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatements
entryRuleStatements 
:
{ before(grammarAccess.getStatementsRule()); }
	 ruleStatements
{ after(grammarAccess.getStatementsRule()); } 
	 EOF 
;

// Rule Statements
ruleStatements
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
(rule__Statements__StatementsAssignment)
{ after(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
)
(
{ before(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
(rule__Statements__StatementsAssignment)*
{ after(grammarAccess.getStatementsAccess().getStatementsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getCodeParserRuleCall()); }
	ruleCode
{ after(grammarAccess.getStatementAccess().getCodeParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleGoal
entryRuleGoal 
:
{ before(grammarAccess.getGoalRule()); }
	 ruleGoal
{ after(grammarAccess.getGoalRule()); } 
	 EOF 
;

// Rule Goal
ruleGoal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoalAccess().getAlternatives()); }
(rule__Goal__Alternatives)
{ after(grammarAccess.getGoalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAchieve
entryRuleAchieve 
:
{ before(grammarAccess.getAchieveRule()); }
	 ruleAchieve
{ after(grammarAccess.getAchieveRule()); } 
	 EOF 
;

// Rule Achieve
ruleAchieve
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAchieveAccess().getGroup()); }
(rule__Achieve__Group__0)
{ after(grammarAccess.getAchieveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuery
entryRuleQuery 
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQueryAccess().getGroup()); }
(rule__Query__Group__0)
{ after(grammarAccess.getQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMaintain
entryRuleMaintain 
:
{ before(grammarAccess.getMaintainRule()); }
	 ruleMaintain
{ after(grammarAccess.getMaintainRule()); } 
	 EOF 
;

// Rule Maintain
ruleMaintain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMaintainAccess().getGroup()); }
(rule__Maintain__Group__0)
{ after(grammarAccess.getMaintainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePerform
entryRulePerform 
:
{ before(grammarAccess.getPerformRule()); }
	 rulePerform
{ after(grammarAccess.getPerformRule()); } 
	 EOF 
;

// Rule Perform
rulePerform
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPerformAccess().getGroup()); }
(rule__Perform__Group__0)
{ after(grammarAccess.getPerformAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResult
entryRuleResult 
:
{ before(grammarAccess.getResultRule()); }
	 ruleResult
{ after(grammarAccess.getResultRule()); } 
	 EOF 
;

// Rule Result
ruleResult
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getResultAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getResultAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Code__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getCodeAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCodeAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getCodeAccess().getIDTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCodeAccess().getBOOLEANTerminalRuleCall_2()); }
	RULE_BOOLEAN
{ after(grammarAccess.getCodeAccess().getBOOLEANTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getCodeAccess().getNumberParserRuleCall_3()); }
	ruleNumber
{ after(grammarAccess.getCodeAccess().getNumberParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getCodeAccess().getNETWORKTerminalRuleCall_4()); }
	RULE_NETWORK
{ after(grammarAccess.getCodeAccess().getNETWORKTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getEqualToAssignment_0()); }
(rule__Operator__EqualToAssignment_0)
{ after(grammarAccess.getOperatorAccess().getEqualToAssignment_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLargerThanAssignment_1()); }
(rule__Operator__LargerThanAssignment_1)
{ after(grammarAccess.getOperatorAccess().getLargerThanAssignment_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getSmallerThanAssignment_2()); }
(rule__Operator__SmallerThanAssignment_2)
{ after(grammarAccess.getOperatorAccess().getSmallerThanAssignment_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLargerOrEqualToAssignment_3()); }
(rule__Operator__LargerOrEqualToAssignment_3)
{ after(grammarAccess.getOperatorAccess().getLargerOrEqualToAssignment_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getSmallerOrEqualToAssignment_4()); }
(rule__Operator__SmallerOrEqualToAssignment_4)
{ after(grammarAccess.getOperatorAccess().getSmallerOrEqualToAssignment_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotEqualToAssignment_5()); }
(rule__Operator__NotEqualToAssignment_5)
{ after(grammarAccess.getOperatorAccess().getNotEqualToAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getAndAssignment_1_0_0()); }
(rule__Condition__AndAssignment_1_0_0)
{ after(grammarAccess.getConditionAccess().getAndAssignment_1_0_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getOrAssignment_1_0_1()); }
(rule__Condition__OrAssignment_1_0_1)
{ after(grammarAccess.getConditionAccess().getOrAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1_0_0()); }
(rule__Expression__Group_1_0_0__0)
{ after(grammarAccess.getExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getGroup_1_0_1()); }
(rule__Expression__Group_1_0_1__0)
{ after(grammarAccess.getExpressionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1_0_0()); }
(rule__Term__Group_1_0_0__0)
{ after(grammarAccess.getTermAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_1_0_1()); }
(rule__Term__Group_1_0_1__0)
{ after(grammarAccess.getTermAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getNumberAssignment_0()); }
(rule__Factor__NumberAssignment_0)
{ after(grammarAccess.getFactorAccess().getNumberAssignment_0()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getVariableAssignment_1()); }
(rule__Factor__VariableAssignment_1)
{ after(grammarAccess.getFactorAccess().getVariableAssignment_1()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getStringAssignment_2()); }
(rule__Factor__StringAssignment_2)
{ after(grammarAccess.getFactorAccess().getStringAssignment_2()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getBooleanAssignment_3()); }
(rule__Factor__BooleanAssignment_3)
{ after(grammarAccess.getFactorAccess().getBooleanAssignment_3()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getGroup_4()); }
(rule__Factor__Group_4__0)
{ after(grammarAccess.getFactorAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getGroup_0()); }
(rule__Trigger__Group_0__0)
{ after(grammarAccess.getTriggerAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTriggerAccess().getGroup_1()); }
(rule__Trigger__Group_1__0)
{ after(grammarAccess.getTriggerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoalAccess().getAchieveParserRuleCall_0()); }
	ruleAchieve
{ after(grammarAccess.getGoalAccess().getAchieveParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGoalAccess().getQueryParserRuleCall_1()); }
	ruleQuery
{ after(grammarAccess.getGoalAccess().getQueryParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getGoalAccess().getMaintainParserRuleCall_2()); }
	ruleMaintain
{ after(grammarAccess.getGoalAccess().getMaintainParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getGoalAccess().getPerformParserRuleCall_3()); }
	rulePerform
{ after(grammarAccess.getGoalAccess().getPerformParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BDI__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BDI__Group__0__Impl
	rule__BDI__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BDI__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBDIAccess().getBDIModelKeyword_0()); }

	'BDIModel {' 

{ after(grammarAccess.getBDIAccess().getBDIModelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BDI__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BDI__Group__1__Impl
	rule__BDI__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BDI__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBDIAccess().getAgentsAssignment_1()); }
(rule__BDI__AgentsAssignment_1)
{ after(grammarAccess.getBDIAccess().getAgentsAssignment_1()); }
)
(
{ before(grammarAccess.getBDIAccess().getAgentsAssignment_1()); }
(rule__BDI__AgentsAssignment_1)*
{ after(grammarAccess.getBDIAccess().getAgentsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BDI__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BDI__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BDI__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBDIAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getBDIAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Agent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__0__Impl
	rule__Agent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getAgentKeyword_0()); }

	'Agent' 

{ after(grammarAccess.getAgentAccess().getAgentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__1__Impl
	rule__Agent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getNameAssignment_1()); }
(rule__Agent__NameAssignment_1)
{ after(grammarAccess.getAgentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__2__Impl
	rule__Agent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAgentAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__3__Impl
	rule__Agent__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getImportAssignment_3()); }
(rule__Agent__ImportAssignment_3)*
{ after(grammarAccess.getAgentAccess().getImportAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__4__Impl
	rule__Agent__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getEventAssignment_4()); }
(rule__Agent__EventAssignment_4)*
{ after(grammarAccess.getAgentAccess().getEventAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__5__Impl
	rule__Agent__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getParametersAssignment_5()); }
(rule__Agent__ParametersAssignment_5)*
{ after(grammarAccess.getAgentAccess().getParametersAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__6__Impl
	rule__Agent__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getBeliefAssignment_6()); }
(rule__Agent__BeliefAssignment_6)*
{ after(grammarAccess.getAgentAccess().getBeliefAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__7__Impl
	rule__Agent__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getPlanAssignment_7()); }
(rule__Agent__PlanAssignment_7)*
{ after(grammarAccess.getAgentAccess().getPlanAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Agent__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Agent__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getAgentAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Imports__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imports__Group__0__Impl
	rule__Imports__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getImportsKeyword_0()); }

	'Imports {' 

{ after(grammarAccess.getImportsAccess().getImportsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imports__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imports__Group__1__Impl
	rule__Imports__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getImportsAccess().getImportsAssignment_1()); }
(rule__Imports__ImportsAssignment_1)
{ after(grammarAccess.getImportsAccess().getImportsAssignment_1()); }
)
(
{ before(grammarAccess.getImportsAccess().getImportsAssignment_1()); }
(rule__Imports__ImportsAssignment_1)*
{ after(grammarAccess.getImportsAccess().getImportsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imports__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imports__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getImportsAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'Import {' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getFilenameParserRuleCall_1()); }
	ruleFilename
{ after(grammarAccess.getImportAccess().getFilenameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getImportAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Events__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Events__Group__0__Impl
	rule__Events__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Events__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventsAccess().getEventsKeyword_0()); }

	'Events {' 

{ after(grammarAccess.getEventsAccess().getEventsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Events__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Events__Group__1__Impl
	rule__Events__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Events__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEventsAccess().getEventsAssignment_1()); }
(rule__Events__EventsAssignment_1)
{ after(grammarAccess.getEventsAccess().getEventsAssignment_1()); }
)
(
{ before(grammarAccess.getEventsAccess().getEventsAssignment_1()); }
(rule__Events__EventsAssignment_1)*
{ after(grammarAccess.getEventsAccess().getEventsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Events__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Events__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Events__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventsAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getEventsAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventKeyword_0()); }

	'Event' 

{ after(grammarAccess.getEventAccess().getEventKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameAssignment_1()); }
(rule__Event__NameAssignment_1)
{ after(grammarAccess.getEventAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__3__Impl
	rule__Event__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventTypeAssignment_3()); }
(rule__Event__EventTypeAssignment_3)
{ after(grammarAccess.getEventAccess().getEventTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__4__Impl
	rule__Event__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParameterAssignment_4()); }
(rule__Event__ParameterAssignment_4)*
{ after(grammarAccess.getEventAccess().getParameterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getEventAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Parameters__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group__0__Impl
	rule__Parameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParametersKeyword_0()); }

	'Parameters {' 

{ after(grammarAccess.getParametersAccess().getParametersKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group__1__Impl
	rule__Parameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getParametersAccess().getParametersAssignment_1()); }
(rule__Parameters__ParametersAssignment_1)
{ after(grammarAccess.getParametersAccess().getParametersAssignment_1()); }
)
(
{ before(grammarAccess.getParametersAccess().getParametersAssignment_1()); }
(rule__Parameters__ParametersAssignment_1)*
{ after(grammarAccess.getParametersAccess().getParametersAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getParametersAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterKeyword_0()); }

	'Parameter {' 

{ after(grammarAccess.getParameterAccess().getParameterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
	rule__Parameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getParameterAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__3__Impl
	rule__Parameter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getValueParserRuleCall_3()); }
	ruleValue
{ after(grammarAccess.getParameterAccess().getValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getParameterAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Value__Group__0__Impl
	rule__Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getValueKeyword_0()); }

	'Value {' 

{ after(grammarAccess.getValueAccess().getValueKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Value__Group__1__Impl
	rule__Value__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getCodeParserRuleCall_1()); }
	ruleCode
{ after(grammarAccess.getValueAccess().getCodeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Value__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getValueAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getGroup_0()); }
(rule__Condition__Group_0__0)
{ after(grammarAccess.getConditionAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getGroup_1()); }
(rule__Condition__Group_1__0)?
{ after(grammarAccess.getConditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_0__0__Impl
	rule__Condition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getSubjectiveAssignment_0_0()); }
(rule__Condition__SubjectiveAssignment_0_0)
{ after(grammarAccess.getConditionAccess().getSubjectiveAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_0__1__Impl
	rule__Condition__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getOperatorAssignment_0_1()); }
(rule__Condition__OperatorAssignment_0_1)
{ after(grammarAccess.getConditionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getObjectiveAssignment_0_2()); }
(rule__Condition__ObjectiveAssignment_0_2)
{ after(grammarAccess.getConditionAccess().getObjectiveAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Condition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_1__0__Impl
	rule__Condition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getAlternatives_1_0()); }
(rule__Condition__Alternatives_1_0)
{ after(grammarAccess.getConditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCompareConditionAssignment_1_1()); }
(rule__Condition__CompareConditionAssignment_1_1)
{ after(grammarAccess.getConditionAccess().getCompareConditionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getTermParserRuleCall_0()); }
	ruleTerm
{ after(grammarAccess.getExpressionAccess().getTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)*
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives_1_0()); }
(rule__Expression__Alternatives_1_0)
{ after(grammarAccess.getExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
(rule__Expression__RightAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1_0_0__0__Impl
	rule__Expression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getExpressionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1_0_1__0__Impl
	rule__Expression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
	ruleFactor
{ after(grammarAccess.getTermAccess().getFactorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)*
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getAlternatives_1_0()); }
(rule__Term__Alternatives_1_0)
{ after(grammarAccess.getTermAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightAssignment_1_1()); }
(rule__Term__RightAssignment_1_1)
{ after(grammarAccess.getTermAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_0_0__0__Impl
	rule__Term__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getMultiplyLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getTermAccess().getMultiplyLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getTermAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_0_1__0__Impl
	rule__Term__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getDivisionLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getTermAccess().getDivisionLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getTermAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Factor__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_4__0__Impl
	rule__Factor__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_4__1__Impl
	rule__Factor__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getExpressionAssignment_4_1()); }
(rule__Factor__ExpressionAssignment_4_1)
{ after(grammarAccess.getFactorAccess().getExpressionAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getFactorAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
	rule__QualifiedName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_2()); }
(rule__QualifiedName__Group_2__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_2__0__Impl
	rule__QualifiedName__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
{ after(grammarAccess.getQualifiedNameAccess().getINTTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Plans__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plans__Group__0__Impl
	rule__Plans__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plans__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlansAccess().getPlansKeyword_0()); }

	'Plans {' 

{ after(grammarAccess.getPlansAccess().getPlansKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plans__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plans__Group__1__Impl
	rule__Plans__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plans__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPlansAccess().getPlansAssignment_1()); }
(rule__Plans__PlansAssignment_1)
{ after(grammarAccess.getPlansAccess().getPlansAssignment_1()); }
)
(
{ before(grammarAccess.getPlansAccess().getPlansAssignment_1()); }
(rule__Plans__PlansAssignment_1)*
{ after(grammarAccess.getPlansAccess().getPlansAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plans__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plans__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plans__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlansAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getPlansAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Plan__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__0__Impl
	rule__Plan__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getPlanKeyword_0()); }

	'Plan {' 

{ after(grammarAccess.getPlanAccess().getPlanKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__1__Impl
	rule__Plan__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getNameAssignment_1()); }
(rule__Plan__NameAssignment_1)
{ after(grammarAccess.getPlanAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__2__Impl
	rule__Plan__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getPriorityValueAssignment_2()); }
(rule__Plan__PriorityValueAssignment_2)
{ after(grammarAccess.getPlanAccess().getPriorityValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__3__Impl
	rule__Plan__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getBodyAssignment_3()); }
(rule__Plan__BodyAssignment_3)
{ after(grammarAccess.getPlanAccess().getBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__4__Impl
	rule__Plan__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getTriggerAssignment_4()); }
(rule__Plan__TriggerAssignment_4)
{ after(grammarAccess.getPlanAccess().getTriggerAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getPlanAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Body__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getBodyKeyword_0()); }

	'Body {' 

{ after(grammarAccess.getBodyAccess().getBodyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__1__Impl
	rule__Body__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getBodyAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Trigger__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trigger__Group_0__0__Impl
	rule__Trigger__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getTriggerKeyword_0_0()); }

	'Trigger {' 

{ after(grammarAccess.getTriggerAccess().getTriggerKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trigger__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trigger__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getEventAssignment_0_1()); }
(rule__Trigger__EventAssignment_0_1)
{ after(grammarAccess.getTriggerAccess().getEventAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Trigger__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trigger__Group_1__0__Impl
	rule__Trigger__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getGoalAssignment_1_0()); }
(rule__Trigger__GoalAssignment_1_0)
{ after(grammarAccess.getTriggerAccess().getGoalAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trigger__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trigger__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getRightCurlyBracketKeyword_1_1()); }

	'}' 

{ after(grammarAccess.getTriggerAccess().getRightCurlyBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BeliefSet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeliefSet__Group__0__Impl
	rule__BeliefSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BeliefSet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefSetAccess().getBeliefSetKeyword_0()); }

	'BeliefSet {' 

{ after(grammarAccess.getBeliefSetAccess().getBeliefSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BeliefSet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeliefSet__Group__1__Impl
	rule__BeliefSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BeliefSet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefSetAccess().getNameAssignment_1()); }
(rule__BeliefSet__NameAssignment_1)
{ after(grammarAccess.getBeliefSetAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BeliefSet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeliefSet__Group__2__Impl
	rule__BeliefSet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BeliefSet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBeliefSetAccess().getBeliefSetAssignment_2()); }
(rule__BeliefSet__BeliefSetAssignment_2)
{ after(grammarAccess.getBeliefSetAccess().getBeliefSetAssignment_2()); }
)
(
{ before(grammarAccess.getBeliefSetAccess().getBeliefSetAssignment_2()); }
(rule__BeliefSet__BeliefSetAssignment_2)*
{ after(grammarAccess.getBeliefSetAccess().getBeliefSetAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BeliefSet__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BeliefSet__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BeliefSet__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefSetAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBeliefSetAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Belief__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Belief__Group__0__Impl
	rule__Belief__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getBeliefKeyword_0()); }

	'Belief {' 

{ after(grammarAccess.getBeliefAccess().getBeliefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Belief__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Belief__Group__1__Impl
	rule__Belief__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getNameAssignment_1()); }
(rule__Belief__NameAssignment_1)
{ after(grammarAccess.getBeliefAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Belief__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Belief__Group__2__Impl
	rule__Belief__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getBeliefGoalAssignment_2()); }
(rule__Belief__BeliefGoalAssignment_2)
{ after(grammarAccess.getBeliefAccess().getBeliefGoalAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Belief__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Belief__Group__3__Impl
	rule__Belief__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getBeliefValidateAssignment_3()); }
(rule__Belief__BeliefValidateAssignment_3)
{ after(grammarAccess.getBeliefAccess().getBeliefValidateAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Belief__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Belief__Group__4__Impl
	rule__Belief__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getFactAssignment_4()); }
(rule__Belief__FactAssignment_4)*
{ after(grammarAccess.getBeliefAccess().getFactAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Belief__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Belief__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getBeliefAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Fact__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__0__Impl
	rule__Fact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getFactKeyword_0()); }

	'Fact {' 

{ after(grammarAccess.getFactAccess().getFactKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__1__Impl
	rule__Fact__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getStatementsAssignment_1()); }
(rule__Fact__StatementsAssignment_1)
{ after(grammarAccess.getFactAccess().getStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__2__Impl
	rule__Fact__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getFactAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getFactAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Achieve__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Achieve__Group__0__Impl
	rule__Achieve__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Achieve__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getAchieveKeyword_0()); }

	'Achieve {' 

{ after(grammarAccess.getAchieveAccess().getAchieveKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Achieve__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Achieve__Group__1__Impl
	rule__Achieve__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Achieve__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getNameAssignment_1()); }
(rule__Achieve__NameAssignment_1)
{ after(grammarAccess.getAchieveAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Achieve__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Achieve__Group__2__Impl
	rule__Achieve__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Achieve__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getGoalplanAssignment_2()); }
(rule__Achieve__GoalplanAssignment_2)
{ after(grammarAccess.getAchieveAccess().getGoalplanAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Achieve__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Achieve__Group__3__Impl
	rule__Achieve__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Achieve__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getConditionAssignment_3()); }
(rule__Achieve__ConditionAssignment_3)
{ after(grammarAccess.getAchieveAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Achieve__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Achieve__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Achieve__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAchieveAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Query__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getQueryKeyword_0()); }

	'Query {' 

{ after(grammarAccess.getQueryAccess().getQueryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__1__Impl
	rule__Query__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getNameAssignment_1()); }
(rule__Query__NameAssignment_1)
{ after(grammarAccess.getQueryAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__2__Impl
	rule__Query__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getGoalplanAssignment_2()); }
(rule__Query__GoalplanAssignment_2)
{ after(grammarAccess.getQueryAccess().getGoalplanAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__3__Impl
	rule__Query__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getConditionAssignment_3()); }
(rule__Query__ConditionAssignment_3)
{ after(grammarAccess.getQueryAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__4__Impl
	rule__Query__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getResultAssignment_4()); }
(rule__Query__ResultAssignment_4)
{ after(grammarAccess.getQueryAccess().getResultAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Maintain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Maintain__Group__0__Impl
	rule__Maintain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getMaintainKeyword_0()); }

	'Maintain {' 

{ after(grammarAccess.getMaintainAccess().getMaintainKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Maintain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Maintain__Group__1__Impl
	rule__Maintain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getNameAssignment_1()); }
(rule__Maintain__NameAssignment_1)
{ after(grammarAccess.getMaintainAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Maintain__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Maintain__Group__2__Impl
	rule__Maintain__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getGoalplanAssignment_2()); }
(rule__Maintain__GoalplanAssignment_2)
{ after(grammarAccess.getMaintainAccess().getGoalplanAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Maintain__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Maintain__Group__3__Impl
	rule__Maintain__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getConditionAssignment_3()); }
(rule__Maintain__ConditionAssignment_3)
{ after(grammarAccess.getMaintainAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Maintain__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Maintain__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getMaintainAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Perform__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Perform__Group__0__Impl
	rule__Perform__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getPerformKeyword_0()); }

	'Perform {' 

{ after(grammarAccess.getPerformAccess().getPerformKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Perform__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Perform__Group__1__Impl
	rule__Perform__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getNameAssignment_1()); }
(rule__Perform__NameAssignment_1)
{ after(grammarAccess.getPerformAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Perform__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Perform__Group__2__Impl
	rule__Perform__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getGoalplanAssignment_2()); }
(rule__Perform__GoalplanAssignment_2)
{ after(grammarAccess.getPerformAccess().getGoalplanAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Perform__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Perform__Group__3__Impl
	rule__Perform__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getConditionAssignment_3()); }
(rule__Perform__ConditionAssignment_3)
{ after(grammarAccess.getPerformAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Perform__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Perform__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getPerformAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__BDI__AgentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBDIAccess().getAgentsAgentParserRuleCall_1_0()); }
	ruleAgent{ after(grammarAccess.getBDIAccess().getAgentsAgentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__ImportAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getImportImportsParserRuleCall_3_0()); }
	ruleImports{ after(grammarAccess.getAgentAccess().getImportImportsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__EventAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getEventEventsParserRuleCall_4_0()); }
	ruleEvents{ after(grammarAccess.getAgentAccess().getEventEventsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__ParametersAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getParametersParametersParserRuleCall_5_0()); }
	ruleParameters{ after(grammarAccess.getAgentAccess().getParametersParametersParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__BeliefAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getBeliefBeliefSetParserRuleCall_6_0()); }
	ruleBeliefSet{ after(grammarAccess.getAgentAccess().getBeliefBeliefSetParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Agent__PlanAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAgentAccess().getPlanPlansParserRuleCall_7_0()); }
	rulePlans{ after(grammarAccess.getAgentAccess().getPlanPlansParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getImportsImportParserRuleCall_1_0()); }
	ruleImport{ after(grammarAccess.getImportsAccess().getImportsImportParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Events__EventsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventsAccess().getEventsEventParserRuleCall_1_0()); }
	ruleEvent{ after(grammarAccess.getEventsAccess().getEventsEventParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__EventTypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventTypeSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getEventAccess().getEventTypeSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ParameterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParameterParameterParserRuleCall_4_0()); }
	ruleParameter{ after(grammarAccess.getEventAccess().getParameterParameterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__ParametersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParametersParameterParserRuleCall_1_0()); }
	ruleParameter{ after(grammarAccess.getParametersAccess().getParametersParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__EqualToAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getEqualToEqualsSignEqualsSignKeyword_0_0()); }
(
{ before(grammarAccess.getOperatorAccess().getEqualToEqualsSignEqualsSignKeyword_0_0()); }

	'==' 

{ after(grammarAccess.getOperatorAccess().getEqualToEqualsSignEqualsSignKeyword_0_0()); }
)

{ after(grammarAccess.getOperatorAccess().getEqualToEqualsSignEqualsSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__LargerThanAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getLargerThanGreaterThanSignKeyword_1_0()); }
(
{ before(grammarAccess.getOperatorAccess().getLargerThanGreaterThanSignKeyword_1_0()); }

	'>' 

{ after(grammarAccess.getOperatorAccess().getLargerThanGreaterThanSignKeyword_1_0()); }
)

{ after(grammarAccess.getOperatorAccess().getLargerThanGreaterThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__SmallerThanAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getSmallerThanLessThanSignKeyword_2_0()); }
(
{ before(grammarAccess.getOperatorAccess().getSmallerThanLessThanSignKeyword_2_0()); }

	'<' 

{ after(grammarAccess.getOperatorAccess().getSmallerThanLessThanSignKeyword_2_0()); }
)

{ after(grammarAccess.getOperatorAccess().getSmallerThanLessThanSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__LargerOrEqualToAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0()); }
(
{ before(grammarAccess.getOperatorAccess().getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0()); }

	'>=' 

{ after(grammarAccess.getOperatorAccess().getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0()); }
)

{ after(grammarAccess.getOperatorAccess().getLargerOrEqualToGreaterThanSignEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__SmallerOrEqualToAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0()); }
(
{ before(grammarAccess.getOperatorAccess().getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0()); }

	'<=' 

{ after(grammarAccess.getOperatorAccess().getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0()); }
)

{ after(grammarAccess.getOperatorAccess().getSmallerOrEqualToLessThanSignEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__NotEqualToAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getNotEqualToExclamationMarkEqualsSignKeyword_5_0()); }
(
{ before(grammarAccess.getOperatorAccess().getNotEqualToExclamationMarkEqualsSignKeyword_5_0()); }

	'!=' 

{ after(grammarAccess.getOperatorAccess().getNotEqualToExclamationMarkEqualsSignKeyword_5_0()); }
)

{ after(grammarAccess.getOperatorAccess().getNotEqualToExclamationMarkEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__SubjectiveAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getSubjectiveQualifiedNameParserRuleCall_0_0_0()); }
	ruleQualifiedName{ after(grammarAccess.getConditionAccess().getSubjectiveQualifiedNameParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_0_1_0()); }
	ruleOperator{ after(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ObjectiveAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getObjectiveExpressionParserRuleCall_0_2_0()); }
	ruleExpression{ after(grammarAccess.getConditionAccess().getObjectiveExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__AndAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getAndAndKeyword_1_0_0_0()); }
(
{ before(grammarAccess.getConditionAccess().getAndAndKeyword_1_0_0_0()); }

	'and' 

{ after(grammarAccess.getConditionAccess().getAndAndKeyword_1_0_0_0()); }
)

{ after(grammarAccess.getConditionAccess().getAndAndKeyword_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OrAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getOrOrKeyword_1_0_1_0()); }
(
{ before(grammarAccess.getConditionAccess().getOrOrKeyword_1_0_1_0()); }

	'or' 

{ after(grammarAccess.getConditionAccess().getOrOrKeyword_1_0_1_0()); }
)

{ after(grammarAccess.getConditionAccess().getOrOrKeyword_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__CompareConditionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getCompareConditionConditionParserRuleCall_1_1_0()); }
	ruleCondition{ after(grammarAccess.getConditionAccess().getCompareConditionConditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_1_1_0()); }
	ruleTerm{ after(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_1_0()); }
	ruleFactor{ after(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__NumberAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getNumberNumberParserRuleCall_0_0()); }
	ruleNumber{ after(grammarAccess.getFactorAccess().getNumberNumberParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getVariableQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getFactorAccess().getVariableQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__StringAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getStringSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getFactorAccess().getStringSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__BooleanAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getBooleanBOOLEANTerminalRuleCall_3_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getFactorAccess().getBooleanBOOLEANTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__ExpressionAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plans__PlansAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlansAccess().getPlansPlanParserRuleCall_1_0()); }
	rulePlan{ after(grammarAccess.getPlansAccess().getPlansPlanParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPlanAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__PriorityValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getPriorityValueINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getPlanAccess().getPriorityValueINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getBodyBodyParserRuleCall_3_0()); }
	ruleBody{ after(grammarAccess.getPlanAccess().getBodyBodyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__TriggerAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getTriggerTriggerParserRuleCall_4_0()); }
	ruleTrigger{ after(grammarAccess.getPlanAccess().getTriggerTriggerParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__EventAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getEventEventCrossReference_0_1_0()); }
(
{ before(grammarAccess.getTriggerAccess().getEventEventIDTerminalRuleCall_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getTriggerAccess().getEventEventIDTerminalRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getTriggerAccess().getEventEventCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__GoalAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getGoalGoalCrossReference_1_0_0()); }
(
{ before(grammarAccess.getTriggerAccess().getGoalGoalIDTerminalRuleCall_1_0_0_1()); }
	RULE_ID{ after(grammarAccess.getTriggerAccess().getGoalGoalIDTerminalRuleCall_1_0_0_1()); }
)
{ after(grammarAccess.getTriggerAccess().getGoalGoalCrossReference_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BeliefSet__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefSetAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBeliefSetAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BeliefSet__BeliefSetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefSetAccess().getBeliefSetBeliefParserRuleCall_2_0()); }
	ruleBelief{ after(grammarAccess.getBeliefSetAccess().getBeliefSetBeliefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBeliefAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__BeliefGoalAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getBeliefGoalSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getBeliefAccess().getBeliefGoalSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__BeliefValidateAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getBeliefValidateSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getBeliefAccess().getBeliefValidateSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Belief__FactAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBeliefAccess().getFactFactParserRuleCall_4_0()); }
	ruleFact{ after(grammarAccess.getBeliefAccess().getFactFactParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getStatementsStatementsParserRuleCall_1_0()); }
	ruleStatements{ after(grammarAccess.getFactAccess().getStatementsStatementsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Achieve__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAchieveAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Achieve__GoalplanAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getAchieveAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Achieve__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAchieveAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getAchieveAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__GoalplanAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getQueryAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getQueryAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ResultAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getResultResultParserRuleCall_4_0()); }
	ruleResult{ after(grammarAccess.getQueryAccess().getResultResultParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMaintainAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__GoalplanAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getMaintainAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Maintain__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaintainAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getMaintainAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPerformAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__GoalplanAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getPerformAccess().getGoalplanSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Perform__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPerformAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getPerformAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NETWORK : RULE_OCTET '.' RULE_OCTET '.' RULE_OCTET '.' RULE_OCTET;

RULE_OCTET : ('0'..'9'|'1'..'9' '0'..'9'|'1' '0'..'9' '0'..'9'|'2' '0'..'5' '0'..'5');

RULE_BOOLEAN : ('false'|'true');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


